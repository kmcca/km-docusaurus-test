"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[22720],{12023:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>r,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var a=n(85893),t=n(11151);const l={title:"Pipeline Scan example for GitLab and Gradle with automatic vulnerability generation using a custom policy",slug:"/r/Pipeline_Scan_Example_for_Using_GitLab_and_Gradle_with_Automatic_Vulnerability_Generation_Using_a_Custom_Policy"},s=void 0,o={id:"guides/integrations/cicd/pipeline_scan/pipeline_scan_gitlab_examples/r_gitlab_gradle_vulnerability_custom_policy",title:"Pipeline Scan example for GitLab and Gradle with automatic vulnerability generation using a custom policy",description:"These code examples show how to download a custom policy and use it in a GitLab pipeline with Gradle and automatic vulnerability generation.",source:"@site/docs/guides/04_integrations/03_cicd/09_pipeline_scan/08_pipeline_scan_gitlab_examples/07_r_gitlab_gradle_vulnerability_custom_policy.md",sourceDirName:"guides/04_integrations/03_cicd/09_pipeline_scan/08_pipeline_scan_gitlab_examples",slug:"/r/Pipeline_Scan_Example_for_Using_GitLab_and_Gradle_with_Automatic_Vulnerability_Generation_Using_a_Custom_Policy",permalink:"/km-docusaurus-test/r/Pipeline_Scan_Example_for_Using_GitLab_and_Gradle_with_Automatic_Vulnerability_Generation_Using_a_Custom_Policy",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Pipeline Scan example for GitLab and Gradle with automatic vulnerability generation using a custom policy",slug:"/r/Pipeline_Scan_Example_for_Using_GitLab_and_Gradle_with_Automatic_Vulnerability_Generation_Using_a_Custom_Policy"},sidebar:"tutorialSidebar",previous:{title:"Pipeline Scan example for GitLab and Gradle with automatic vulnerability generation using a built-in policy",permalink:"/km-docusaurus-test/r/Pipeline_Scan_Example_for_Using_GitLab_and_Gradle_with_Automatic_Vulnerability_Generation_Using_a_Built_in_Policy"},next:{title:"Pipeline Scan example for using a baseline file with GitLab",permalink:"/km-docusaurus-test/r/Pipeline_Scan_Example_for_Using_a_Baseline_File_with_GitLab"}},r={},c=[];function _(e){const i={a:"a",code:"code",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.p,{children:"These code examples show how to download a custom policy and use it in a GitLab pipeline with Gradle and automatic vulnerability generation."}),"\n",(0,a.jsxs)(i.p,{children:["To download a policy locally to use later in the pipeline, use the ",(0,a.jsx)(i.code,{children:"--request_policy"})," parameter as shown in this example:"]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-shell",children:'- java -jar pipeline-scan.jar\n       --veracode_api_id "${VERACODE_API_ID}"\n       --veracode_api_key "${VERACODE_API_SECRET}"\n       --request_policy="Custom Policy"\n'})}),"\n",(0,a.jsxs)(i.p,{children:["Pipeline Scan automatically names the locally-generated policy file using the format ",(0,a.jsx)(i.code,{children:"<policy name>.json"}),", replacing any spaces with underscores. In this example, the resulting file is named ",(0,a.jsx)(i.code,{children:"Custom_Policy.json"}),". You should place this file in a location accessible to the pipeline for its subsequent use. Use the ",(0,a.jsx)(i.code,{children:"--policy_file"})," parameter to specify the local custom policy for vulnerability filtering:"]}),"\n",(0,a.jsxs)(i.p,{children:["The example includes a script that downloads and unzips ",(0,a.jsx)(i.code,{children:"pipeline-scan-LATEST.zip"}),", to ensure you have the latest version, then runs ",(0,a.jsx)(i.code,{children:"pipeline-scan.jar"})," using your ",(0,a.jsx)(i.a,{href:"/km-docusaurus-test/r/c_api_credentials3",children:"API credentials"}),". For improved stability, Veracode recommends that you change these scripts to use the ",(0,a.jsx)(i.a,{href:"https://hub.docker.com/r/veracode/pipeline-scan",children:"Pipeline Scan Docker image"}),"."]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-yaml",children:'image: <image-with-above-requirements>\n\nstages:\n  - build\n  - scan\n\nbuild_job:\n  stage: build\n  artifacts:\n    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}_build\n    paths:\n      - build/\n    expire_in: 1 week\n  script: gradle clean build\n\npipeline scan:\n  stage: scan\n  dependencies:\n    - build_job\n  artifacts:\n    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}_pipeline-results\n    paths:\n      - results.json\n      - veracode_gitlab_vulnerabilities.json\n    reports:\n      sast: veracode_gitlab_vulnerabilities.json\n    expire_in: 1 week\n    when: always\n  script:\n    - curl -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip\n    - unzip pipeline-scan-LATEST.zip pipeline-scan.jar\n    - java -jar pipeline-scan.jar\n      --veracode_api_id "${VERACODE_API_ID}"\n      --veracode_api_key "${VERACODE_API_SECRET}"\n      --file "build/libs/sample.jar"\n      --policy_file="Custom_Policy.json"\n      --baseline_file "${CI_BASELINE_PATH}"\n      --timeout "${CI_TIMEOUT}"\n      --project_name "${CI_PROJECT_PATH}"\n      --project_url "${CI_REPOSITORY_URL}"\n      --project_ref "${CI_COMMIT_REF_NAME}"\n      --gl_vulnerability_generation true\n'})})]})}function p(e={}){const{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(_,{...e})}):_(e)}},11151:(e,i,n)=>{n.d(i,{Z:()=>o,a:()=>s});var a=n(67294);const t={},l=a.createContext(t);function s(e){const i=a.useContext(l);return a.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(l.Provider,{value:i},e.children)}}}]);