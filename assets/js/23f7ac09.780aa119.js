"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[28278],{13707:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>_});var a=n(85893),t=n(11151);const r={title:"Pipeline Scan example for using GitLab and Gradle with automatic vulnerability generation",slug:"/r/Pipeline_Scan_Example_for_Using_GitLab_and_Gradle_with_Automatic_Vulnerability_Generation"},s=void 0,l={id:"guides/integrations/cicd/pipeline_scan/pipeline_scan_gitlab_examples/r_gitlab_gradle_vulnerability_example",title:"Pipeline Scan example for using GitLab and Gradle with automatic vulnerability generation",description:"This example YAML code shows how to add a Pipeline Scan and automatic vulnerability generation as a build stage in a GitLab build pipeline using Gradle. Automatic vulnerability generation requires a GitLab Premium or Ultimate license.",source:"@site/docs/guides/04_integrations/03_cicd/09_pipeline_scan/08_pipeline_scan_gitlab_examples/05_r_gitlab_gradle_vulnerability_example.md",sourceDirName:"guides/04_integrations/03_cicd/09_pipeline_scan/08_pipeline_scan_gitlab_examples",slug:"/r/Pipeline_Scan_Example_for_Using_GitLab_and_Gradle_with_Automatic_Vulnerability_Generation",permalink:"/km-docusaurus-test/r/Pipeline_Scan_Example_for_Using_GitLab_and_Gradle_with_Automatic_Vulnerability_Generation",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Pipeline Scan example for using GitLab and Gradle with automatic vulnerability generation",slug:"/r/Pipeline_Scan_Example_for_Using_GitLab_and_Gradle_with_Automatic_Vulnerability_Generation"},sidebar:"tutorialSidebar",previous:{title:"Pipeline Scan example for using GitLab and Gradle with automatic issue generation",permalink:"/km-docusaurus-test/r/Pipeline_Scan_Example_for_Using_GitLab_and_Gradle_with_Automatic_Issue_Generation"},next:{title:"Pipeline Scan example for GitLab and Gradle with automatic vulnerability generation using a built-in policy",permalink:"/km-docusaurus-test/r/Pipeline_Scan_Example_for_Using_GitLab_and_Gradle_with_Automatic_Vulnerability_Generation_Using_a_Built_in_Policy"}},o={},_=[];function c(e){const i={a:"a",admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.p,{children:"This example YAML code shows how to add a Pipeline Scan and automatic vulnerability generation as a build stage in a GitLab build pipeline using Gradle. Automatic vulnerability generation requires a GitLab Premium or Ultimate license."}),"\n",(0,a.jsx)(i.admonition,{type:"note",children:(0,a.jsxs)(i.p,{children:["Before you can use the ",(0,a.jsx)(i.a,{href:"/km-docusaurus-test/r/r_pipeline_scan_commands",children:(0,a.jsx)(i.code,{children:"--gl_issue_generation"})}),"  parameter, you must ",(0,a.jsx)(i.a,{href:"/km-docusaurus-test/r/Set_a_GitLab_Access_Token",children:"create a GitLab access token"}),". If you want to use this parameter when scanning Java applications, you must also ",(0,a.jsx)(i.a,{href:"/km-docusaurus-test/r/Set_Environment_Variables_for_GitLab_Base_Directories",children:"configure environment variables to set GitLab base directories"}),". You can use any GitLab subscription to generate GitLab issues."]})}),"\n",(0,a.jsxs)(i.p,{children:["This structure in the GitLab CI performs a self-test and sets the ",(0,a.jsx)(i.code,{children:"$VERACODE_API_*"})," variables in the CI/CD settings."]}),"\n",(0,a.jsxs)(i.p,{children:["The example includes a script that downloads and unzips ",(0,a.jsx)(i.code,{children:"pipeline-scan-LATEST.zip"}),", to ensure you have the latest version, then runs ",(0,a.jsx)(i.code,{children:"pipeline-scan.jar"})," using your ",(0,a.jsx)(i.a,{href:"/km-docusaurus-test/r/c_api_credentials3",children:"API credentials"}),". For improved stability, Veracode recommends that you change these scripts to use the ",(0,a.jsx)(i.a,{href:"https://hub.docker.com/r/veracode/pipeline-scan",children:"Pipeline Scan Docker image"}),"."]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-yaml",children:'image: <image-with-above-requirements>\n\nstages:\n  - build\n  - scan\n\nbuild_job:\n  stage: build\n  artifacts:\n    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}_build\n    paths:\n      - build/\n    expire_in: 1 week\n  script: gradle clean build\n\npipeline scan:\n  stage: scan\n  dependencies:\n    - build_job\n  artifacts:\n    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}_pipeline-results\n    paths:\n      - results.json\n      - veracode_gitlab_vulnerabilities.json\n    reports:\n      sast: veracode_gitlab_vulnerabilities.json\n    expire_in: 1 week\n    when: always\n  script:\n    - curl -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip\n    - unzip pipeline-scan-LATEST.zip pipeline-scan.jar\n    - java -jar pipeline-scan.jar\n      --veracode_api_id "${VERACODE_API_ID}"\n      --veracode_api_key "${VERACODE_API_SECRET}"\n      --file "build/libs/sample.jar"\n      --fail_on_severity="Very High, High"\n      --fail_on_cwe="80"\n      --baseline_file "${CI_BASELINE_PATH}"\n      --timeout "${CI_TIMEOUT}"\n      --project_name "${CI_PROJECT_PATH}"\n      --project_url "${CI_REPOSITORY_URL}"\n      --project_ref "${CI_COMMIT_REF_NAME}"\n      --gl_vulnerability_generation true\n'})})]})}function u(e={}){const{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},11151:(e,i,n)=>{n.d(i,{Z:()=>l,a:()=>s});var a=n(67294);const t={},r=a.createContext(t);function s(e){const i=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(r.Provider,{value:i},e.children)}}}]);