"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[72770],{50665:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var i=s(85893),n=s(11151);const r={title:"About cross-site scripting (XSS) attacks",slug:"/r/cross-site-scripting"},a=void 0,o={id:"guides/dynamic_analysis/dast_essentials/dast_essentials_xss/cross-site-scripting",title:"About cross-site scripting (XSS) attacks",description:"Cross-site scripting is the injection of client-side scripts into web applications, which is enabled by a lack of validating and correctly encoding user input. Learn here, how you can efficiently fix XSS vulnerabilities.",source:"@site/docs/guides/08_dynamic_analysis/15_dast_essentials/07_dast_essentials_xss/03_cross-site-scripting.md",sourceDirName:"guides/08_dynamic_analysis/15_dast_essentials/07_dast_essentials_xss",slug:"/r/cross-site-scripting",permalink:"/km-docusaurus-test/r/cross-site-scripting",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"About cross-site scripting (XSS) attacks",slug:"/r/cross-site-scripting"},sidebar:"tutorialSidebar",previous:{title:"Prevent stored XSS attacks",permalink:"/km-docusaurus-test/r/stored-xss"},next:{title:"Prevent Cross-Site Request Forgery (CSRF) attacks",permalink:"/km-docusaurus-test/r/cross-site-request-forgery"}},c={},l=[{value:"Security assessment",id:"security-assessment",level:2},{value:"Vulnerability information",id:"vulnerability-information",level:2},{value:"Types",id:"types",level:2},{value:"Stored XSS (persistent)",id:"stored-xss-persistent",level:3},{value:"Reflected XSS (non-persistent)",id:"reflected-xss-non-persistent",level:3},{value:"DOM-based XSS",id:"dom-based-xss",level:3},{value:"Prevent attacks",id:"prevent-attacks",level:2},{value:"Avoid untrusted input",id:"avoid-untrusted-input",level:3},{value:"Filter user input",id:"filter-user-input",level:3},{value:"Fix DOM-based XSS",id:"fix-dom-based-xss",level:3},{value:"Use an XSS vulnerability tool",id:"use-an-xss-vulnerability-tool",level:3},{value:"Enable a Content Security Policy (CSP)",id:"enable-a-content-security-policy-csp",level:3}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,n.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Cross-site scripting is the injection of client-side scripts into web applications, which is enabled by a lack of validating and correctly encoding user input. Learn here, how you can efficiently fix XSS vulnerabilities."}),"\n",(0,i.jsx)(t.h2,{id:"security-assessment",children:"Security assessment"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Security_Assessment_XSS-1",src:s(24146).Z+"",width:"907",height:"332"})}),"\n",(0,i.jsxs)(t.p,{children:["CVSS vector:  ",(0,i.jsxs)(t.a,{href:"https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",children:["AV",":N","/AC",":L","/PR",":N","/UI",":R","/S",":C","/C",":L","/I",":L","/A",":N"]})]}),"\n",(0,i.jsx)(t.h2,{id:"vulnerability-information",children:"Vulnerability information"}),"\n",(0,i.jsx)(t.p,{children:"Cross-site scripting (XSS) is the injection of client-side scripts into web applications, which is enabled by a lack of validating and correctly encoding user input. The malicious scripts are executed within the browser and enable various attacks, from stealing the end-users session to monitoring and altering all actions the end-user performs on the affected website. This is possible whenever user input (for example, on a website) is not sufficiently validated on the client- or the server-side."}),"\n",(0,i.jsx)(t.p,{children:"This includes altering all user actions on that website since the browser does not know that this script cannot be trusted. Because this script is trusted, it can access, e.g., cookies or session tokens or even alter the content of an HTML Page."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://crashtest-security.com/wp-content/uploads/2019/03/XSS_Description-1024x576.png",alt:"Cross-Site Scripting attacks are very common in web applications and APIs"})}),"\n",(0,i.jsx)(t.p,{children:"It can be injected persistently or non-persistently, depending on the type of XSS that is being used. Usual vehicles of cross-site scripting attacks include search forms, forums, or comment sections."}),"\n",(0,i.jsx)(t.h2,{id:"types",children:"Types"}),"\n",(0,i.jsx)(t.p,{children:"There are different types of cross-site scripting attacks introduced in the following sections."}),"\n",(0,i.jsx)(t.p,{children:"Different types of XSS attacks distinguish if the malicious scripts could be injected non-persistent or persistent. Furthermore, there is a differentiation between the vulnerability caused by a flawed input validation on the client- or server-side."}),"\n",(0,i.jsx)(t.p,{children:"There three main types of cross-site scripting attacks are:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Stored XSS"}),"\n",(0,i.jsx)(t.li,{children:"Reflected XSS"}),"\n",(0,i.jsx)(t.li,{children:"Dom-based XSS"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"stored-xss-persistent",children:"Stored XSS (persistent)"}),"\n",(0,i.jsx)(t.p,{children:"A Stored Cross-site Scripting vulnerability allows an attacker to inject a malicious script persistently into a web application."}),"\n",(0,i.jsx)(t.p,{children:"In a Stored XSS example, the script might have been submitted using an input field to the web server, which did not perform a sufficient validation and stored the script persistently in the database. The consequence might be that this script is now being delivered to all users visiting the web application and, e.g., gaining access to the user session cookies."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"The script is persistently stored in the web app"}),"\n",(0,i.jsx)(t.li,{children:"Users visiting the app after the infection retrieve the script"}),"\n",(0,i.jsx)(t.li,{children:"Malicious code exploits flaws in the web application"}),"\n",(0,i.jsx)(t.li,{children:"The script and the attack are visible on the server-side (to the app owner)"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"reflected-xss-non-persistent",children:"Reflected XSS (non-persistent)"}),"\n",(0,i.jsx)(t.p,{children:"A Reflected Cross-site Scripting Vulnerability appears if unvalidated input is directly displayed to the user."}),"\n",(0,i.jsx)(t.p,{children:"In a Reflected XSS example, the input of a search form is reflected on the page to show what the search key was. An attacker may craft a URL that contains malicious code and spread the URL using e-mail or social media. A user who selects this link opens the (valid) web application, which then runs the malicious code in the browser."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"The script is not stored in the web application"}),"\n",(0,i.jsx)(t.li,{children:"Malicious code is shown to only one user"}),"\n",(0,i.jsx)(t.li,{children:"Users that open the link execute the script when an app is opened"}),"\n",(0,i.jsx)(t.li,{children:"The script and the attack are not necessarily visible on the server-side (to the app owner)"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"dom-based-xss",children:"DOM-based XSS"}),"\n",(0,i.jsx)(t.p,{children:"DOM stands for Document Object Model and is an interface to web pages. It is an API to the page, allowing programs to read and manipulate its content, structure, and styles."}),"\n",(0,i.jsx)(t.p,{children:"A DOM-based XSS attack may be successfully executed even when the server does not embed any malicious code into the webpage by using a flaw in the JavaScript executed in the web browser. For example, malicious code can be executed if the client site JavaScript modifies the DOM tree of the webpage based on an input field or GET parameter without validating the input."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"The script is not stored in the web application"}),"\n",(0,i.jsx)(t.li,{children:"Malicious code is shown to only one user"}),"\n",(0,i.jsx)(t.li,{children:"Malicious code exploits flaws in the browser on the user side"}),"\n",(0,i.jsx)(t.li,{children:"The script and the attack are not necessarily visible on the server-side (to the app owner)"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"prevent-attacks",children:"Prevent attacks"}),"\n",(0,i.jsx)(t.p,{children:"To prevent XSS attacks, treat all user input as potentially malicious and follow some programming guidelines:"}),"\n",(0,i.jsx)(t.h3,{id:"avoid-untrusted-input",children:"Avoid untrusted input"}),"\n",(0,i.jsx)(t.p,{children:"XSS attacks only appear if any user input is displayed on the webpage. Therefore, try to avoid revealing any (untrusted) user input, if possible. If you need to display user data, restrict the places where the user input might appear. Any input displayed inside a JavaScript tag or a URL shown on the site is much more likely to be exploited than the input that appears inside a div or span element inside the HTML body."}),"\n",(0,i.jsx)(t.h3,{id:"filter-user-input",children:"Filter user input"}),"\n",(0,i.jsxs)(t.p,{children:["When untrusted input is shown as normal text inside an HTML tag, filter out the characters that allow an attacker to insert a ",(0,i.jsx)(t.code,{children:"<script>"})," tag on the page. Use the following functions for that:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"htmlspecialchars($input)                                    # PHP  \nhtml.escape(input, quote=True)                              # Python  \norg.apache.commons.lang.StringEscapeUtils.escapeHtml(input) # Java\n"})}),"\n",(0,i.jsx)(t.p,{children:"In JavaScript, you need to define an extra function for this task. You may use:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"function escapeHtml(text) {  \n  var map = {  \n    '&': '&amp;',  \n    '<': '&lt;',  \n    '>': '&gt;',  \n    '\"': '&quot;',  \n    \"'\": '&#039;'  \n  };  \n   \n  return text.replace(/[&<>\"']/g, function(m) { return map[m]; });  \n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["When user input needs to be inserted into tag attributes or inside a script, you will need to use more robust escape mechanisms. See the ",(0,i.jsx)(t.a,{href:"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html",children:"XSS Prevention Cheat Sheet"})," for more information. This is the case if you plan to allow user input in cases such as:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"<a href=\"http://example.org/search/q?...USER INPUT...\"></div>  \n<script>alert('...USER INPUT...')<\/script>  \n<style> { property: ...USER INPUT...; } </style>\n"})}),"\n",(0,i.jsx)(t.h3,{id:"fix-dom-based-xss",children:"Fix DOM-based XSS"}),"\n",(0,i.jsxs)(t.p,{children:["To prevent a DOM-based XSS attack, you could use a save JavaScript property like ",(0,i.jsx)(t.code,{children:"element.text"})," content for untrusted user input. This prevents the browser from rendering the potential JavaScript code inside the ",(0,i.jsx)(t.code,{children:"untrustedVariable"}),". So, for example, one of the Dom XSS examples could look like the following code snippet:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"element.textContent = untrustedVariable\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Furthermore, it is essential to use secure JavaScript functions like ",(0,i.jsx)(t.code,{children:"inner text"})," or ",(0,i.jsx)(t.code,{children:"text content"})," instead of ",(0,i.jsx)(t.code,{children:"innerHtml"}),". Finally, it is always good to remember that it is perilous to pass user-controlled inputs into your web application without proper sanitization."]}),"\n",(0,i.jsxs)(t.p,{children:["For further information, OWASP provides a specific ",(0,i.jsx)(t.a,{href:"https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html",children:"DOM-based XSS Prevention Cheat Sheet"}),", including an additional set of rules for securing your web application from DOM-based XSS."]}),"\n",(0,i.jsx)(t.h3,{id:"use-an-xss-vulnerability-tool",children:"Use an XSS vulnerability tool"}),"\n",(0,i.jsxs)(t.p,{children:["As mentioned earlier, XSS attacks are sometimes difficult to detect. However, this can be changed if you get some external help. Another way to prevent XSS Attacks is using the ",(0,i.jsx)(t.a,{href:"https://crashtest-security.com/xss-scanner/",children:"XSS Tool"}),". Still, manual testing is highly time-consuming and costly and, therefore, not possible to be done for every iteration of your web application."]}),"\n",(0,i.jsx)(t.p,{children:"Consequently, your code should not be untested before any release."}),"\n",(0,i.jsx)(t.p,{children:"Using automated security, you can scan your web application for Cross-Site Scripting and other critical vulnerabilities before every release you do. This way, you can ensure that the Live-Version for your web application is still secured whenever you alter or add a feature."}),"\n",(0,i.jsx)(t.h3,{id:"enable-a-content-security-policy-csp",children:"Enable a Content Security Policy (CSP)"}),"\n",(0,i.jsx)(t.p,{children:"This can prevent not just Cross-Site Scripting attacks but also Cross-Site Injection attacks."}),"\n",(0,i.jsxs)(t.p,{children:["For more information, see ",(0,i.jsx)(t.a,{href:"https://crashtest-security.com/what-exactly-is-cross-site-scripting/",children:"XSS Page"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},24146:(e,t,s)=>{s.d(t,{Z:()=>i});const i=s.p+"assets/images/Security_Assessment_XSS-1-feef9b28f2d48cc8fd737345b853d897.png"},11151:(e,t,s)=>{s.d(t,{Z:()=>o,a:()=>a});var i=s(67294);const n={},r=i.createContext(n);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);