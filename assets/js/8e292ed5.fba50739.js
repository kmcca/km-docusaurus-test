"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[70643],{14876:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var t=s(85893),n=s(11151);const r={title:"About Content Security Policy",slug:"/r/content-security-policy"},c=void 0,o={id:"guides/dynamic_analysis/dast_essentials/dast_essentials_tls_vulns/content-security-policy",title:"About Content Security Policy",description:"This section explores Content Security Policy (CSP) and how a CSP header can help prevent common vulnerabilities.",source:"@site/docs/guides/08_dynamic_analysis/15_dast_essentials/08_dast_essentials_tls_vulns/01_content-security-policy.md",sourceDirName:"guides/08_dynamic_analysis/15_dast_essentials/08_dast_essentials_tls_vulns",slug:"/r/content-security-policy",permalink:"/km-docusaurus-test/r/content-security-policy",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"About Content Security Policy",slug:"/r/content-security-policy"},sidebar:"tutorialSidebar",previous:{title:"Prevent SSL and TLS attacks",permalink:"/km-docusaurus-test/r/ssl-tls-vulnerabilities"},next:{title:"Harden TLS session resumption",permalink:"/km-docusaurus-test/r/harden-tls-session-resumption"}},a={},l=[{value:"Fetch directives",id:"fetch-directives",level:2},{value:"Document directives",id:"document-directives",level:2},{value:"Navigation directives",id:"navigation-directives",level:2},{value:"Reporting directives",id:"reporting-directives",level:2},{value:"Vulnerabilities you can prevent using CSP",id:"vulnerabilities-you-can-prevent-using-csp",level:2},{value:"XSS attacks",id:"xss-attacks",level:3},{value:"Clickjacking attacks",id:"clickjacking-attacks",level:3},{value:"Dangling markup attacks",id:"dangling-markup-attacks",level:3},{value:"Testing <code>Content-Security-Policy</code>",id:"testing-content-security-policy",level:2},{value:"CSP header examples",id:"csp-header-examples",level:2},{value:"Restricting content to the site origin",id:"restricting-content-to-the-site-origin",level:3},{value:"Enabling images from any origin",id:"enabling-images-from-any-origin",level:3},{value:"Ensuring all content is loaded using TLS",id:"ensuring-all-content-is-loaded-using-tls",level:3}];function d(e){const i={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.p,{children:"This section explores Content Security Policy (CSP) and how a CSP header can help prevent common vulnerabilities."}),"\n",(0,t.jsx)(i.p,{children:"Content Security Policy directives are defined in HTTP response headers, called CSP headers. The directions instruct the browser on trusted content sources and include a list of sources that should be prevented. In addition, the Content-Security-Policy header declares content restrictions by specifying server origins and script endpoints."}),"\n",(0,t.jsxs)(i.p,{children:["A Content-Security-Policy header provides a framework for developers to control privilege and the loading of resources for the application process. It helps reduce the risk of attacks that leverage the need for loading resources within a malicious context. With properly formulated CSPs, the developers can access a reporting mechanism to ",(0,t.jsx)(i.a,{href:"/km-docusaurus-test/r/vulnerability-management",children:"detect and document security flaws"})," exploited in production. All major browsers support CSPs, making the standard header an essential application security layer."]}),"\n",(0,t.jsx)(i.p,{children:"CSPs enable granular control over:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Inline script execution."}),"\n",(0,t.jsx)(i.li,{children:"How inline styles are applied."}),"\n",(0,t.jsx)(i.li,{children:"Dynamic code execution."}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"CSP directives fall under various categories depending on use-case and content attribute. These include:"}),"\n",(0,t.jsx)(i.h2,{id:"fetch-directives",children:"Fetch directives"}),"\n",(0,t.jsx)(i.p,{children:"These directives specify the locations for loading certain resource types. Fetch directives include:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"child-src"}),": defines the script sources on your allowlist for browsing context loaded in frames and web workers."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"connect-src"}),": specifies the URLs to be loaded using scripts."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"default-src"}),": the fallback directive for all fetch directives. This policy directive defines the default source list for other fetch directives."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"object-src"}),": defines allowed sources for ",(0,t.jsx)(i.code,{children:"<applet>"}),", ",(0,t.jsx)(i.code,{children:"<embed>"})," and ",(0,t.jsx)(i.code,{children:"<object>"})," elements."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"style-src"}),": provides a list of valid sources for cascading style sheets."]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"document-directives",children:"Document directives"}),"\n",(0,t.jsx)(i.p,{children:"Document directives help control the properties of the working environment or document where a policy will be effective. These include:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"sandbox"}),": provides a sandbox for a specified resource similar to inline script elements."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"base-uri"}),": specifies the URLs allowed in the ",(0,t.jsx)(i.code,{children:"base"})," element of the document."]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"navigation-directives",children:"Navigation directives"}),"\n",(0,t.jsx)(i.p,{children:"These directives govern the locations of a form submission or where the document initiates any navigations. They include:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"form-action"}),": specifies the URLs that act as targets for the submission of form elements."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"frame-ancestors"}),": restricts the parents to be embedded on the web page using the ",(0,t.jsx)(i.code,{children:"<frame>"}),", ",(0,t.jsx)(i.code,{children:"<object>"}),", ",(0,t.jsx)(i.code,{children:"<iframe>"}),", ",(0,t.jsx)(i.code,{children:"<applet>"})," and ",(0,t.jsx)(i.code,{children:"<embed>"})," elements."]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"reporting-directives",children:"Reporting directives"}),"\n",(0,t.jsx)(i.p,{children:"These directives govern how CSP violations are documented and reported. They include:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"report-to"}),": initiates a security policy violation event."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"report-uri"}),": a policy directive instructing the client environment to report any attempt to violate CSP specifications."]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Other directives include:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"require-sri-for"}),": enforces the use of Subresource Integrity (SRI) for the style attribute and page script sources."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"trusted-types"}),": used to specify a list of accepted, non-spoofable typed values, thus ",(0,t.jsx)(i.a,{href:"https://crashtest-security.com/dom-based-xss-attack/",children:"mitigating DOM-based XSS attacks"}),"."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"require-trusted-types-for"}),": this policy directive enforces the trusted-types policy on scripts that act as sinks for DOM-based XSS."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"upgrade-insecure-requests"}),": in websites with numerous insecure legacy URLs, this policy instructs the browser to treat every insecure URL as if it has been replaced with an HTTPS secure URL."]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"vulnerabilities-you-can-prevent-using-csp",children:"Vulnerabilities you can prevent using CSP"}),"\n",(0,t.jsx)(i.p,{children:"CSPs protect web applications from several vulnerabilities and attacks, including:"}),"\n",(0,t.jsx)(i.h3,{id:"xss-attacks",children:"XSS attacks"}),"\n",(0,t.jsxs)(i.p,{children:["CSPs form the first line of defense against XSS attacks as they block executing malicious scripts that untrusted sources inject. To reduce the XSS attack surface, developers restrict loading resources using the ",(0,t.jsx)(i.code,{children:"script-src self"})," directive. This directive only allows the page to load scripts originating from the same server hosting the page. The ",(0,t.jsx)(i.code,{children:"script-src <allowed-web-url>"})," enables the page to load scripts from a specific domain. Besides adding resource origins to your allowlist, CSPs help ",(0,t.jsx)(i.a,{href:"/km-docusaurus-test/r/cross-site-scripting",children:"mitigate XSS attacks"})," using hashes and nonces."]}),"\n",(0,t.jsx)(i.p,{children:"A nonce is a random value specified in the CSP so that it is used to load scripts in a tag. The CSP checks the nonce match source list, ensuring that the values match; otherwise, the script is executed. A hash-algo component of a trusted script contents can also be specified in a CSP directive. The script only runs when the actual script hash matches the value in the CSP directive."}),"\n",(0,t.jsx)(i.h3,{id:"clickjacking-attacks",children:"Clickjacking attacks"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"frame-ancestors self"})," CSP directive governs that only pages with the exact origin can frame the policy page. Developers can also wholly prevent framing using the ",(0,t.jsx)(i.code,{children:"frame-ancestors none"})," directive. CSPs can be used alongside the X-Frame-Options header to ",(0,t.jsx)(i.a,{href:"https://crashtest-security.com/clickjacking-attack/",children:"prevent clickjacking attacks"}),". CSPs are more effective since they ",(0,t.jsx)(i.a,{href:"https://crashtest-security.com/multiple-values-access-control-allow-origin/",children:"allow for the specification of multiple domains"}),". The policy also validates every external resource in the parent frame hierarchy, enabling stronger protections against frame hijacking attacks."]}),"\n",(0,t.jsx)(i.h3,{id:"dangling-markup-attacks",children:"Dangling markup attacks"}),"\n",(0,t.jsxs)(i.p,{children:["CSPs protect against dangling markup attacks by restricting the page origin of images to be loaded. The ",(0,t.jsx)(i.code,{children:"img-src self"})," directive only allows images to be loaded from the exact origin. The ",(0,t.jsx)(i.code,{children:"img-src <allowed-web-url>"})," directive governs the page to load images from a specific domain. The ",(0,t.jsx)(i.code,{children:"img"})," tag helps prevent dangling markup attacks since it makes it easy to capture input data with minimal user interaction."]}),"\n",(0,t.jsxs)(i.p,{children:["Other attacks that CSPs mitigate include ",(0,t.jsx)(i.a,{href:"https://crashtest-security.com/cross-frame-scripting-xfs/",children:"framing attacks"}),", ",(0,t.jsx)(i.a,{href:"https://crashtest-security.com/code-injection/",children:"code injection attacks"}),", and ",(0,t.jsx)(i.a,{href:"/km-docusaurus-test/r/cross-site-request-forgery",children:"Cross-Site Request Forgery (CSRF)"}),"."]}),"\n",(0,t.jsxs)(i.h2,{id:"testing-content-security-policy",children:["Testing ",(0,t.jsx)(i.code,{children:"Content-Security-Policy"})]}),"\n",(0,t.jsxs)(i.p,{children:["Testing the CSP involves examining the CSP meta element ",(0,t.jsx)(i.code,{children:"Content-Security-Policy"})," HTTP response header in a proxy tool. Some insecure configurations to investigate include:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["The unsafe-eval directive that allows the use of ",(0,t.jsx)(i.code,{children:"eval()"})," in the application."]}),"\n",(0,t.jsxs)(i.li,{children:["Any ",(0,t.jsx)(i.code,{children:"unsafe-inline"})," event handlers that may lead to the injection of malicious content into the webserver."]}),"\n",(0,t.jsx)(i.li,{children:"Any resources that can be loaded from any origin using the wildcard (*) source."}),"\n",(0,t.jsx)(i.li,{children:"Using a wildcard (*) source for the frame-ancestors directive enabling framing for all origins."}),"\n",(0,t.jsx)(i.li,{children:"Ensuring that a strict policy is applied for business-critical applications."}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"The security researcher can also use tools such as DAST Essentials to check the strength of their security policies."}),"\n",(0,t.jsx)(i.h2,{id:"csp-header-examples",children:"CSP header examples"}),"\n",(0,t.jsx)(i.p,{children:"A few sample HTTP headers include:"}),"\n",(0,t.jsx)(i.h3,{id:"restricting-content-to-the-site-origin",children:"Restricting content to the site origin"}),"\n",(0,t.jsxs)(i.p,{children:["To ensure all content comes from the site origin, the web developer/administrator uses the ",(0,t.jsx)(i.code,{children:"Default-Src"})," directive:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"Content-Security-Policy: default-src 'self'\n"})}),"\n",(0,t.jsx)(i.h3,{id:"enabling-images-from-any-origin",children:"Enabling images from any origin"}),"\n",(0,t.jsx)(i.p,{children:"CSP allows for the specification of multiple policies for a resource by separating them using semicolons. For example, the developer can set user content to include images from any origin, restrict audio/video and load external scripts from a specific trusted server as shown:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"Content-Security-Policy: default-src 'self'; img-src *; media-src darwin1.com darwin2.com; script-src darwincripts.example.com\n"})}),"\n",(0,t.jsx)(i.h3,{id:"ensuring-all-content-is-loaded-using-tls",children:"Ensuring all content is loaded using TLS"}),"\n",(0,t.jsx)(i.p,{children:"Developers can prevent adversaries from eavesdropping on client requests by ensuring all website content loads using TLS. It is achieved using the security policy below:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"Content-Security-Policy: default-src https://darwin.site.com\n"})}),"\n",(0,t.jsxs)(i.p,{children:["This policy ensures that the server only allows access to documents loaded through the single-origin ",(0,t.jsx)(i.code,{children:"https:darwin.site.com"})," over HTTPS."]})]})}function h(e={}){const{wrapper:i}={...(0,n.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},11151:(e,i,s)=>{s.d(i,{Z:()=>o,a:()=>c});var t=s(67294);const n={},r=t.createContext(n);function c(e){const i=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),t.createElement(r.Provider,{value:i},e.children)}}}]);