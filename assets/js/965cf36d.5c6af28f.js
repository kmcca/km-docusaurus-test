"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[42389],{1798:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>h});var s=t(85893),a=t(11151);const o={title:"Using webhooks with DAST Essentials",slug:"/r/using-webhooks"},i=void 0,r={id:"guides/dynamic_analysis/dast_essentials/dast_essentials_integrations/using-webhooks",title:"Using webhooks with DAST Essentials",description:"You can use webhooks to integrate DAST Essentials with your development tools.",source:"@site/docs/guides/08_dynamic_analysis/15_dast_essentials/05_dast_essentials_integrations/05_using-webhooks.md",sourceDirName:"guides/08_dynamic_analysis/15_dast_essentials/05_dast_essentials_integrations",slug:"/r/using-webhooks",permalink:"/km-docusaurus-test/r/using-webhooks",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Using webhooks with DAST Essentials",slug:"/r/using-webhooks"},sidebar:"tutorialSidebar",previous:{title:"Ticketing systems integrations",permalink:"/km-docusaurus-test/r/ticketing-systems"},next:{title:"DAST Essentials FAQs",permalink:"/km-docusaurus-test/r/getting-started-with-crashtest-security"}},c={},h=[{value:"Create a webhook",id:"create-a-webhook",level:2},{value:"Example: Webhook with HMAC authentication",id:"example-webhook-with-hmac-authentication",level:2},{value:"Example: Webhook with authentication and a payload",id:"example-webhook-with-authentication-and-a-payload",level:2},{value:"Example: Retrieve scan reports",id:"example-retrieve-scan-reports",level:2},{value:"Example: Webhook request responses",id:"example-webhook-request-responses",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["You can use webhooks to integrate DAST Essentials with your ",(0,s.jsx)(n.a,{href:"/km-docusaurus-test/r/crashtest-security-integrations",children:"development tools"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"create-a-webhook",children:"Create a webhook"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"In DAST Essentials, go to the Target list page."}),"\n",(0,s.jsxs)(n.li,{children:["Select a target, then select ",(0,s.jsx)(n.strong,{children:"CONFIGURE"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Select the ",(0,s.jsx)(n.strong,{children:"Integrations"})," tab or, for chat tools, select the ",(0,s.jsx)(n.strong,{children:"Notifications"})," tab."]}),"\n",(0,s.jsx)(n.li,{children:"To see the instructions and example code you can use to create a webhook, select an integration."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["For example, in a ",(0,s.jsx)(n.a,{href:"/km-docusaurus-test/r/ci-cd-pipeline",children:"CI/CD pipeline"}),", you can send a POST request to the webhook to start a scan for the target."]}),"\n",(0,s.jsx)(n.p,{children:"The following examples demonstrate how to send a request and download results."}),"\n",(0,s.jsx)(n.h2,{id:"example-webhook-with-hmac-authentication",children:"Example: Webhook with HMAC authentication"}),"\n",(0,s.jsxs)(n.p,{children:["To successfully call Veracode webhook endpoints, the HTTP authorization header of each request must include an additional ",(0,s.jsx)(n.a,{href:"/km-docusaurus-test/r/c_enabling_hmac",children:"HMAC signature"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"You can use any of the existing libraries listed in this section or use the following examples provided as bash scripts."}),"\n",(0,s.jsx)(n.p,{children:"To run the webhook manually, you can use the following bash script."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'#!/usr/bin/env bash\n\n#### Setup variables ####\n\n# Stop the script as soon as the first command fails\nset -euo pipefail\n\n# Set WEBHOOK to webhook secret (without URL)\nWEBHOOK=$1\n\n# Set the Veracode API ID\nAPI_ID=$2\n\n# Set the Veracode API SECRET\nAPI_SECRET=$3\n\n# Set the API endpoint\n# Use \u201capi.veracode.com\u201d for US instance or \u201capi.veracode.eu\u201d for EU instance\nAPI_ENDPOINT="api.veracode.com"\nAPI_PATH="/dae/api/core-api/webhook"\n\n generate_hmac_header() { \n VERACODE_AUTH_SCHEMA="VERACODE-HMAC-SHA-256"\n VERACODE_API_VERSION="vcode_request_version_1"\n signing_data=$1 \n nonce="$(openssl rand -hex 16)"\n timestamp=$(date +%s"000")\n\n nonce_key=$(echo "$nonce" | xxd -r -p | openssl dgst -sha256 -mac HMAC -macopt hexkey:"$API_SECRET" | awk -F" " \'{ print $2 }\')\n time_key=$(echo -n "$timestamp" | openssl dgst -sha256 -mac HMAC -macopt hexkey:"$nonce_key" | awk -F" " \'{ print $2 }\')\n sig_key=$(echo -n "$VERACODE_API_VERSION" | openssl dgst -sha256 -mac HMAC -macopt hexkey:"$time_key" | awk -F" " \'{ print $2 }\')\n signature=$(echo -n "$signing_data" | openssl dgst -sha256 -mac HMAC -macopt hexkey:"$sig_key" | awk -F" " \'{ print $2 }\')\n\necho "$VERACODE_AUTH_SCHEMA id=$API_ID,ts=$timestamp,nonce=$nonce,sig=$signature"\n } \n\n#### Start Security Scan ####\n\n# Start Scan and get scan ID\n\nsigning_data="id=$API_ID&host=$API_ENDPOINT&url=$API_PATH/$WEBHOOK&method=POST"\n\nVERACODE_AUTH_HEADER=$(generate_hmac_header $signing_data)\n\ncurl -X POST -H "Authorization: $VERACODE_AUTH_HEADER" --data "" https://$API_ENDPOINT$API_PATH/$WEBHOOK\n'})}),"\n",(0,s.jsx)(n.h2,{id:"example-webhook-with-authentication-and-a-payload",children:"Example: Webhook with authentication and a payload"}),"\n",(0,s.jsx)(n.p,{children:"You can send a request that includes a payload and authentication data. In the following example, the payload is an API specification file for an API scan target. DAST Essentials uses the data to configure your target before you start the scan."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"This request overwrites the user credentials and stores them for the subsequent scan."})}),"\n",(0,s.jsx)(n.p,{children:"To send a webhook request with payload data, run the following cURL command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'curl -X POST -H "content-type: application/json" -H "Authorization: $VERACODE_AUTH_HEADER" --data YOUR_PAYLOAD https://$API_ENDPOINT/$API_PATH/$WEBHOOK`\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Where, ",(0,s.jsx)(n.code,{children:"YOUR_PAYLOAD"})," must match the following example syntax:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{   \n  "system_authentication": {   \n    "basic_auth": {   \n      "username": "username",   \n      "password": "password"   \n    }   \n  },   \n  "application_authentication": [   \n    {   \n      "username": "username",   \n      "password": "password",   \n      "url": "example.com/login"   \n    }   \n  ],   \n  "parameter_authentication": [   \n    {   \n      "type": "HEADER",   \n      "key": "Authorization",   \n      "value": "Bearer 12345678"   \n    }   \n  ],   \n  "specs": {   \n    "api_spec": {   \n      "swagger": "2.0",   \n      "info": [],   \n      "host": "api.example.com",   \n      "basePath": "/v1",   \n      "schemes": [   \n        "https"   \n      ],   \n      "paths": []   \n    }   \n  }   \n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["For ",(0,s.jsx)(n.code,{children:"api_spec"}),", you can enter the entire contents of an API specification file."]}),"\n",(0,s.jsxs)(n.p,{children:["Because ",(0,s.jsx)(n.code,{children:"application_authentication"})," require UI-based sign in, you cannot use it with API scan targets."]}),"\n",(0,s.jsx)(n.h2,{id:"example-retrieve-scan-reports",children:"Example: Retrieve scan reports"}),"\n",(0,s.jsx)(n.p,{children:"You can use a webhook to retrieve a report of the results in JUnit XML format."}),"\n",(0,s.jsxs)(n.p,{children:["The following example script starts a scan and periodically polls the status of the scan. When the scan is complete, DAST Essentials downloads the report to the file ",(0,s.jsx)(n.code,{children:"report.xml"}),". To use this example script, you must install ",(0,s.jsx)(n.a,{href:"https://curl.haxx.se/",children:"curl"})," and ",(0,s.jsx)(n.a,{href:"https://stedolan.github.io/jq/",children:"jq"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'#!/usr/bin/env bash\n\n#### Setup variables ####\n\n# Stop the script as soon as the first command fails\nset -euo pipefail\n\n# Set WEBHOOK to webhook secret (without URL)\nWEBHOOK=$1\n\n# Set the Veracode API ID\nAPI_ID=$2\n\n# Set the Veracode API SECRET\nAPI_SECRET=$3\n\n# Set the API endpoint\n# Use \u201capi.veracode.com\u201d for US instance or \u201capi.veracode.eu\u201d for EU instance\nAPI_ENDPOINT="api.veracode.com"\nAPI_PATH=/dae/api/core-api/webhook\n\n#### Setup the build system ####\n\nmkdir -p test-reports\n\n generate_hmac_header() { \n VERACODE_AUTH_SCHEMA="VERACODE-HMAC-SHA-256"\n VERACODE_API_VERSION="vcode_request_version_1"\n signing_data=$1\n\n nonce="$(openssl rand -hex 16)"\n timestamp=$(date +%s"000")\n\n nonce_key=$(echo "$nonce" | xxd -r -p | openssl dgst -sha256 -mac HMAC -macopt hexkey:"$API_SECRET" | awk -F" " \'{ print $2 }\')\n time_key=$(echo -n "$timestamp" | openssl dgst -sha256 -mac HMAC -macopt hexkey:"$nonce_key" | awk -F" " \'{ print $2 }\')\n sig_key=$(echo -n "$VERACODE_API_VERSION" | openssl dgst -sha256 -mac HMAC -macopt hexkey:"$time_key" | awk -F" " \'{ print $2 }\')\n signature=$(echo -n "$signing_data" | openssl dgst -sha256 -mac HMAC -macopt hexkey:"$sig_key" | awk -F" " \'{ print $2 }\')\n\necho "$VERACODE_AUTH_SCHEMA id=$API_ID,ts=$timestamp,nonce=$nonce,sig=$signature"\n } \n\n#### Start Security Scan ####\n\n# Start Scan and get scan ID\n\nsigning_data="id=$API_ID&host=$API_ENDPOINT&url=$API_PATH/$WEBHOOK&method=POST"\n\nVERACODE_AUTH_HEADER=$(generate_hmac_header $signing_data)\n\nSCAN_ID=`curl --silent -X POST -H "Authorization: $VERACODE_AUTH_HEADER" --data "" https://$API_ENDPOINT$API_PATH/$WEBHOOK | jq .data.scanId`\n# Check if a positive integer was returned as SCAN_ID\nif ! [ $SCAN_ID -ge 0 ] 2>/dev/null\nthen\n   echo "Could not start Scan for Webhook $WEBHOOK."\n   exit 1\nfi\n\necho "Started Scan for Webhook $WEBHOOK. Scan ID is $SCAN_ID."\n\n#### Check Security Scan Status ####\n\n# Set status to Queued (100)\nSTATUS=100\n\n# Run the scan until the status is not queued (100) or running (101) anymore\nwhile [ $STATUS -le 101 ]\ndo\n   echo "Scan Status currently is $STATUS (101 = Running)"\n\n   # Only poll every minute\n   sleep 60\n\nsigning_data="id=$API_ID&host=$API_ENDPOINT&url=$API_PATH/$WEBHOOK/scans/$SCAN_ID/status&method=GET"\n\nVERACODE_AUTH_HEADER=$(generate_hmac_header $signing_data)\n\n   # Refresh status\n    STATUS=`curl --silent -H "Authorization: $VERACODE_AUTH_HEADER" https://$API_ENDPOINT$API_PATH/$WEBHOOK/scans/$SCAN_ID/status | jq .data.status.status_code`\n\ndone\n\necho "Scan finished with status $STATUS."\n\n#### Download Scan Report ####\n\nsigning_data="id=$API_ID&host=$API_ENDPOINT&url=$API_PATH/$WEBHOOK/scans/$SCAN_ID/report/junit&method=GET"\n\nVERACODE_AUTH_HEADER=$(generate_hmac_header $signing_data)\n\ncurl --silent -H "Authorization: $VERACODE_AUTH_HEADER" https://$API_ENDPOINT$API_PATH/$WEBHOOK/scans/$SCAN_ID/report/junit -o test-reports/report.xml\necho "Downloaded Report to test-reports/report.xml" \n'})}),"\n",(0,s.jsx)(n.h2,{id:"example-webhook-request-responses",children:"Example: Webhook request responses"}),"\n",(0,s.jsx)(n.p,{children:"The responses are in JSON."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{"message": "webhook_scan_started", "data": {"scanId": SCAN_ID}}    # Success Case  \n{"message": "Scan is already running"}                              # Failure Case\n'})})]})}function d(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>i});var s=t(67294);const a={},o=s.createContext(a);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);