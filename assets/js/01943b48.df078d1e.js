"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2752],{96888:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var s=t(85893),n=t(11151);const a={title:"The OWASP Top 10",slug:"/r/owasp"},r=void 0,o={id:"guides/dynamic_analysis/dast_essentials/owasp",title:"The OWASP Top 10",description:"What is OWASP?",source:"@site/docs/guides/08_dynamic_analysis/15_dast_essentials/03_owasp.md",sourceDirName:"guides/08_dynamic_analysis/15_dast_essentials",slug:"/r/owasp",permalink:"/km-docusaurus-test/r/owasp",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"The OWASP Top 10",slug:"/r/owasp"},sidebar:"tutorialSidebar",previous:{title:"Mitigate DAST Essentials findings",permalink:"/km-docusaurus-test/r/vulnerability-management"},next:{title:"DAST Essentials target configuration",permalink:"/km-docusaurus-test/r/continuous-security-testing"}},c={},l=[{value:"What is OWASP?",id:"what-is-owasp",level:2},{value:"What is OWASP Top 10?",id:"what-is-owasp-top-10",level:2},{value:"The OWASP Top 10",id:"the-owasp-top-10",level:2},{value:"1. Broken Access Control",id:"1-broken-access-control",level:3},{value:"2. Cryptographic Failures",id:"2-cryptographic-failures",level:3},{value:"3. Injection",id:"3-injection",level:3},{value:"4. Insecure Design",id:"4-insecure-design",level:3},{value:"5. Security Misconfiguration",id:"5-security-misconfiguration",level:3},{value:"6. Vulnerable and Outdated Components",id:"6-vulnerable-and-outdated-components",level:3},{value:"7. Identification and Authentication Failures",id:"7-identification-and-authentication-failures",level:3},{value:"8. Software and Data Integrity Failures",id:"8-software-and-data-integrity-failures",level:3},{value:"9. Security Logging and Monitoring Failures",id:"9-security-logging-and-monitoring-failures",level:3},{value:"10. Server-Side Request Forgery (SSRF)",id:"10-server-side-request-forgery-ssrf",level:3}];function d(e){const i={a:"a",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,n.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h2,{id:"what-is-owasp",children:"What is OWASP?"}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.a,{href:"https://owasp.org/",children:"Open Worldwide Application Security Project"})," is dedicated to creating a safer web application environment. It offers articles, tools, technologies, and forums to empower every developer to develop secure code. Amongst other projects, one of the most notable projects of OWASP is the OWASP Top 10."]}),"\n",(0,s.jsx)(i.h2,{id:"what-is-owasp-top-10",children:"What is OWASP Top 10?"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.a,{href:"https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project",children:"OWASP Top 10"})," is a publicly shared list of the ten most critical web application vulnerabilities according to the Open Web Application Security Project. Web application security experts develop and maintain the list. The OWASP Top 10 aims to educate companies on vulnerabilities they need to mitigate to secure their web application."]}),"\n",(0,s.jsxs)(i.p,{children:["This list is also under development for ",(0,s.jsx)(i.a,{href:"https://www.owasp.org/index.php/OWASP_Mobile_Security_Project",children:"mobile applications"}),"."]}),"\n",(0,s.jsx)(i.p,{children:"Next to the Top 10 list, OWASP also publishes and maintains the following resources:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"https://www.owasp.org/index.php/OWASP_Testing_Project",children:"OWASP Testing Guide"}),": best practices for application testing."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"https://www.owasp.org/index.php/OWASP_Juice_Shop_Project",children:"OWASP Juice Shop"}),": an intentionally insecure web application for security training."]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"the-owasp-top-10",children:"The OWASP Top 10"}),"\n",(0,s.jsx)(i.h3,{id:"1-broken-access-control",children:"1. Broken Access Control"}),"\n",(0,s.jsxs)(i.p,{children:["Access control enforces restrictions on authenticated users to perform actions outside their permission level. ",(0,s.jsx)(i.a,{href:"https://crashtest-security.com/broken-access-control-prevention/",children:"Broken access control"})," occurs when such limits are not correctly implemented. This can lead to unauthorized access to sensitive information, as well as its modification or destruction."]}),"\n",(0,s.jsx)(i.h3,{id:"2-cryptographic-failures",children:"2. Cryptographic Failures"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.a,{href:"https://crashtest-security.com/owasp-cryptographic-failures/",children:"Cryptographic failures"})," refer to problems with cryptography or the absence of cryptography altogether. Previously this item was known as ",(0,s.jsx)(i.a,{href:"https://crashtest-security.com/sensitive-data-exposure/",children:"Sensitive Data Exposure"}),", but this name was not entirely accurate as it described a symptom and effect rather than a cause. Nevertheless, cryptographic failure might lead to exposure of data."]}),"\n",(0,s.jsxs)(i.p,{children:["This type of failure applies to the protection and secrecy of data in transit and at rest. Such data typically include authentication details, such as usernames and passwords, but also personally identifiable information (PII) such as personal and financial information, health records, business secrets, and more. Failures arise for various reasons, and ",(0,s.jsx)(i.a,{href:"https://crashtest-security.com/mitm-attack/",children:"a man-in-the-middle attack often exploits vulnerabilities"}),"."]}),"\n",(0,s.jsx)(i.h3,{id:"3-injection",children:"3. Injection"}),"\n",(0,s.jsxs)(i.p,{children:["An ",(0,s.jsx)(i.a,{href:"https://crashtest-security.com/what-are-the-different-types-of-injection-attacks/",children:"injection attack"})," refers to untrusted data by an application that forces it to execute commands. Such data or malicious code is inserted by an attacker and can compromise data or the whole application. The most common injection attacks are SQL injections and ",(0,s.jsx)(i.a,{href:"https://crashtest-security.com/cross-site-scripting-xss/",children:"cross-site scripting (XSS) attacks"}),", such as ",(0,s.jsx)(i.a,{href:"https://crashtest-security.com/code-injection/",children:"code injections"}),", ",(0,s.jsx)(i.a,{href:"https://crashtest-security.com/crashtest_injection_attacks/",children:"command injections"}),", ",(0,s.jsx)(i.a,{href:"https://crashtest-security.com/prevent-ccs-injection/",children:"CCS injections"}),"."]}),"\n",(0,s.jsx)(i.h3,{id:"4-insecure-design",children:"4. Insecure Design"}),"\n",(0,s.jsxs)(i.p,{children:["This category of vulnerabilities is focused on the risks associated with flaws in design and architecture. As explained by OWASP, these are different from the risks associated with deficiencies in implementation. A well-implemented ",(0,s.jsx)(i.a,{href:"https://crashtest-security.com/insecure-design-vulnerability/",children:"insecure design"}),"is still vulnerable to attacks."]}),"\n",(0,s.jsx)(i.p,{children:"Insecure design refers partly to the lack of security controls and business risk profiling in software development, and thereby the lack of proper determination of the degree of security design needed."}),"\n",(0,s.jsx)(i.h3,{id:"5-security-misconfiguration",children:"5. Security Misconfiguration"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.a,{href:"/km-docusaurus-test/r/ssl-tls-vulnerabilities",children:"Security misconfiguration"})," is a common issue opening attack surfaces. This commonly results from insecure default configurations, incomplete or ad hoc configurations, open cloud storage, misconfigured HTTP headers or encryption, and verbose error messages containing sensitive information. All operating systems, frameworks, libraries, and applications must be securely configured, but they must be patched/upgraded promptly."]}),"\n",(0,s.jsx)(i.h3,{id:"6-vulnerable-and-outdated-components",children:"6. Vulnerable and Outdated Components"}),"\n",(0,s.jsx)(i.p,{children:"This category was previously known as Using Components with Known Vulnerabilities."}),"\n",(0,s.jsx)(i.p,{children:"Components like libraries, frameworks, and other software modules run with the same privileges. Such an attack can facilitate severe data loss or server takeover if a vulnerable component is exploited. In addition, applications and APIs using known vulnerabilities might undermine application defenses and enable various attacks and impacts."}),"\n",(0,s.jsxs)(i.p,{children:["To help you assess whether you are using components with known vulnerabilities, ",(0,s.jsx)(i.a,{href:"/km-docusaurus-test/r/fingerprinting",children:"fingerprinting scanners"})," try to detect any web server or web application frameworks and associated versions running on the server."]}),"\n",(0,s.jsx)(i.h3,{id:"7-identification-and-authentication-failures",children:"7. Identification and Authentication Failures"}),"\n",(0,s.jsxs)(i.p,{children:["This set of vulnerabilities was previously known as ",(0,s.jsx)(i.a,{href:"https://crashtest-security.com/broken-authentication-and-session-management/",children:"Broken Authentication"}),"."]}),"\n",(0,s.jsx)(i.p,{children:"These can arise if an application:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"It is not protected against automated attacks such as credential stuffing"}),"\n",(0,s.jsx)(i.li,{children:"Allows for brute force attacks"}),"\n",(0,s.jsx)(i.li,{children:"Accepts the use of default, weak, or well-known passwords"}),"\n",(0,s.jsx)(i.li,{children:"Has soft or ineffective credential recovery and forgotten password procedures"}),"\n",(0,s.jsx)(i.li,{children:"Employs plain text, encrypted, or weakly hashed password data stores"}),"\n",(0,s.jsx)(i.li,{children:"Does not use or has ineffective multi-factor authentication"}),"\n",(0,s.jsx)(i.li,{children:"Exposes the session identified in the URL"}),"\n",(0,s.jsx)(i.li,{children:"Reuses the session identified after login"}),"\n",(0,s.jsx)(i.li,{children:"Does not correctly invalidate user sessions and authentication tokens during logout or when inactive"}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"8-software-and-data-integrity-failures",children:"8. Software and Data Integrity Failures"}),"\n",(0,s.jsx)(i.p,{children:"This new category on the OWASP list relates to vulnerabilities in software updates, critical data, and CI/CD pipelines whose integrity is not verified. For example, an application that relies on plugins, libraries, or modules from unverified and untrusted sources, repositories, or content delivery networks (CDNs) may be exposed to such a failure."}),"\n",(0,s.jsx)(i.p,{children:'A similar source of failure may be the auto-update functionality of most applications that do not necessarily include a thorough integrity check. This opens the door for attackers to distribute their updates to create vulnerabilities. Finally, this category also includes what was previously called "Insecure Deserialization" in the 2017 list. Failures that arise here are due to objects or data encoded or serialized into a structure visible to an attacker and which they can modify.'}),"\n",(0,s.jsx)(i.h3,{id:"9-security-logging-and-monitoring-failures",children:"9. Security Logging and Monitoring Failures"}),"\n",(0,s.jsxs)(i.p,{children:["Previously known as ",(0,s.jsx)(i.a,{href:"https://crashtest-security.com/insufficient-logging-monitoring-guide/",children:"Insufficient Logging & Monitoring"}),", this category has been expanded to include more types of failures. While logging and monitoring are challenging to test, this category is essential because losses can impact accountability, visibility, incident alerting, and forensics. In addition, your application can further be exposed to information leakage if logging and alerting events are visible to users or attackers."]}),"\n",(0,s.jsx)(i.h3,{id:"10-server-side-request-forgery-ssrf",children:"10. Server-Side Request Forgery (SSRF)"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.a,{href:"https://crashtest-security.com/server-side-request-forgery-ssrf/",children:"Server-Side Request Forgery"})," issues arise when a web application does not validate the user-supplied URL when fetching a remote resource. This enables attackers to force the application to send a crafted request to an unexpected destination, even if protected by a firewall, VPN, or network access control list (ACL). Fetching a URL is a common feature among modern web applications, which increases in instances of SSRF. Moreover, these are also becoming more severe due to the increasing complexity of architectures and cloud services."]})]})}function h(e={}){const{wrapper:i}={...(0,n.a)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},11151:(e,i,t)=>{t.d(i,{Z:()=>o,a:()=>r});var s=t(67294);const n={},a=s.createContext(n);function r(e){const i=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),s.createElement(a.Provider,{value:i},e.children)}}}]);