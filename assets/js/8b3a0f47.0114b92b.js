"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[833],{19120:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>n,metadata:()=>c,toc:()=>l});var i=s(85893),a=s(11151);const n={title:"About cross-site scripting (XSS) attacks",slug:"/r/cross-site-scripting-xss"},r=void 0,c={id:"guides/dynamic_analysis/dast_essentials/dast_essentials_xss/README",title:"About cross-site scripting (XSS) attacks",description:"Cross-site scripting is a client-side application security vulnerability that allows the adversary to manipulate user interactions with the webserver/application. In violation of the same-origin policy, attackers exploit insecure input interfaces and client-side scripting to execute malicious code. While doing so, the victim is tricked into visiting the page with a malicious script so that the executable code is delivered to the affected browser. In such attacks, hackers also masquerade as compromised users to access user data and carry out actions with their permission. In instances where the victim is a privileged-access user, attackers can fully compromise the application data and functionality. Any application not validating the user input when generating script outputs is vulnerable to XSS attacks.",source:"@site/docs/guides/08_dynamic_analysis/15_dast_essentials/07_dast_essentials_xss/README.md",sourceDirName:"guides/08_dynamic_analysis/15_dast_essentials/07_dast_essentials_xss",slug:"/r/cross-site-scripting-xss",permalink:"/km-docusaurus-test/r/cross-site-scripting-xss",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"About cross-site scripting (XSS) attacks",slug:"/r/cross-site-scripting-xss"},sidebar:"tutorialSidebar",previous:{title:"Will the scanner negatively impact my website?",permalink:"/km-docusaurus-test/r/will-my-website-be-negatively-affected-by-the-scanner"},next:{title:"Prevent reflected XSS attacks",permalink:"/km-docusaurus-test/r/reflected-xss"}},o={},l=[];function u(e){const t={a:"a",li:"li",p:"p",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["Cross-site scripting is a client-side application security vulnerability that allows the adversary to manipulate user interactions with the webserver/application. In violation of the ",(0,i.jsx)(t.a,{href:"https://crashtest-security.com/same-origin-policy-sop/",children:"same-origin policy"}),", attackers exploit insecure input interfaces and client-side scripting to execute malicious code. While doing so, the victim is tricked into visiting the page with a malicious script so that the executable code is delivered to the affected browser. In such attacks, hackers also masquerade as compromised users to access user data and carry out actions with their permission. In instances where the victim is a privileged-access user, attackers can fully compromise the application data and functionality. Any application not validating the user input when generating script outputs is vulnerable to XSS attacks."]}),"\n",(0,i.jsx)(t.p,{children:"XSS attacks are generally categorized as:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/km-docusaurus-test/r/reflected-xss",children:"Reflected"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/km-docusaurus-test/r/stored-xss",children:"Stored/persistent"})}),"\n",(0,i.jsx)(t.li,{children:"DOM-based"}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},11151:(e,t,s)=>{s.d(t,{Z:()=>c,a:()=>r});var i=s(67294);const a={},n=i.createContext(a);function r(e){const t=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(n.Provider,{value:t},e.children)}}}]);