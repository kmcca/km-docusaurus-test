"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[63375],{36023:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>o});var i=n(85893),s=n(11151);const a={title:"Create an API service account with the REST API",slug:"/r/c_identity_create_api"},r=void 0,c={id:"guides/apis/rest_apis/identity_rest_api/identity_api_create_service_account/README",title:"Create an API service account with the REST API",description:"This use case scenario provides the Identity REST API request and payload for creating an API service account.",source:"@site/docs/guides/14_apis/04_rest_apis/11_identity_rest_api/02_identity_api_create_service_account/README.md",sourceDirName:"guides/14_apis/04_rest_apis/11_identity_rest_api/02_identity_api_create_service_account",slug:"/r/c_identity_create_api",permalink:"/km-docusaurus-test/r/c_identity_create_api",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Create an API service account with the REST API",slug:"/r/c_identity_create_api"},sidebar:"tutorialSidebar",previous:{title:"Create user and SAML user accounts with the REST API",permalink:"/km-docusaurus-test/r/c_identity_create_human"},next:{title:"Video: Create and manage API service accounts with the REST API",permalink:"/km-docusaurus-test/r/Create_and_Manage_API_Service_Accounts_with_the_Identity_API"}},d={},o=[{value:"User Roles",id:"user-roles",level:2}];function l(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"This use case scenario provides the Identity REST API request and payload for creating an API service account."}),"\n",(0,i.jsx)(t.p,{children:"Send the following request to create an API service account:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell",children:'http --auth-type=veracode_hmac POST "https://api.veracode.com/api/authn/v2/users" < input.json\n'})}),"\n",(0,i.jsx)(t.p,{children:"The API passes the JSON file that you populate with the necessary values as shown in this example payload:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'{\n   "user_name":"vitunicornidentityapi",\n   "first_name":"VITUnicorn",\n   "last_name":"IdentityAPI",\n   "email_address":"unicorn+identityapi1@gmail.com",\n   "ip_restricted":false,\n   "active":true,\n   "roles":[\n      {\n         "role_name":"noteamrestrictionapi"\n      },\n      {\n         "role_name":"apisubmitanyscan"\n      },\n      {\n         "role_name":"uploadapi"\n      },\n      {\n         "role_name":"resultsapi"\n      }\n   ],\n   "permissions":[\n      {\n         "permission_name":"apiUser"\n      }\n   ],\n   "teams":[\n      {\n         "team_id":"teamId"\n      }\n   ]\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["If you want an API service account to have access to all applications, regardless of which team the user is a member, use ",(0,i.jsx)(t.code,{children:"noteamrestrictionapi"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["To restrict scan types for a user with the ",(0,i.jsx)(t.code,{children:"uploadapi"})," role, use one or more of these additional roles:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"apisubmitanyscan"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"apisubmitstaticscan"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"apisubmitdynamicscan"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"apisubmitmanualscan"})}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"user-roles",children:"User Roles"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Role Short Name"}),(0,i.jsx)(t.th,{children:"Role Name"}),(0,i.jsx)(t.th,{children:"Additional Roles Required"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"submitterapi"})}),(0,i.jsx)(t.td,{children:"Upload API - Submit Only"}),(0,i.jsxs)(t.td,{children:["Users must have the additional role that matches the type of scan they want to submit: ",(0,i.jsx)(t.code,{children:"apisubmitstaticscan"}),", ",(0,i.jsx)(t.code,{children:"apisubmitdynamicscan"}),", ",(0,i.jsx)(t.code,{children:"apisubmitmanualscan"}),", ",(0,i.jsx)(t.code,{children:"noteamrestrictionapi"}),", ",(0,i.jsx)(t.code,{children:"apisubmitanyscan"})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"uploadapi"})}),(0,i.jsx)(t.td,{children:"Upload and Scan API"}),(0,i.jsxs)(t.td,{children:["Users must have the additional role that matches the type of scan they want to run: ",(0,i.jsx)(t.code,{children:"apisubmitstaticscan"}),", ",(0,i.jsx)(t.code,{children:"apisubmitdynamicscan"}),", ",(0,i.jsx)(t.code,{children:"apisubmitmanualscan"}),", ",(0,i.jsx)(t.code,{children:"noteamrestrictionapi"}),", ",(0,i.jsx)(t.code,{children:"apisubmitanyscan"})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"resultsapi"})}),(0,i.jsx)(t.td,{children:"Results API"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"mitigationapi"})}),(0,i.jsx)(t.td,{children:"Mitigation API"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"archerreports"})}),(0,i.jsx)(t.td,{children:"Archer Reports API"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"greenlightapiuser"})}),(0,i.jsx)(t.td,{children:"Greenlight API User"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"adminapi"})}),(0,i.jsx)(t.td,{children:"Admin API"}),(0,i.jsx)(t.td,{})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>r});var i=n(67294);const s={},a=i.createContext(s);function r(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);