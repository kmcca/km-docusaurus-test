"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[41908],{86320:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var t=i(85893),s=i(11151);const a={title:"Prevent injection attacks",slug:"/r/injection-attacks"},r=void 0,o={id:"guides/dynamic_analysis/dast_essentials/dast_essentials_misc/dast_essentials_injection_attacks",title:"Prevent injection attacks",description:"What is file inclusion?",source:"@site/docs/guides/08_dynamic_analysis/15_dast_essentials/09_dast_essentials_misc/01_dast_essentials_injection_attacks.md",sourceDirName:"guides/08_dynamic_analysis/15_dast_essentials/09_dast_essentials_misc",slug:"/r/injection-attacks",permalink:"/km-docusaurus-test/r/injection-attacks",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Prevent injection attacks",slug:"/r/injection-attacks"},sidebar:"tutorialSidebar",previous:{title:"Prevent general attacks",permalink:"/km-docusaurus-test/r/Prevent_general_attacks"},next:{title:"Prevent fingerprinting attacks",permalink:"/km-docusaurus-test/r/fingerprinting"}},c={},l=[{value:"What is file inclusion?",id:"what-is-file-inclusion",level:2},{value:"Security assessment",id:"security-assessment",level:3},{value:"What is the file inclusion?",id:"what-is-the-file-inclusion",level:3},{value:"Types of file inclusion",id:"types-of-file-inclusion",level:3},{value:"Validating user input",id:"validating-user-input",level:3},{value:"How to prevent LFI and RFI?",id:"how-to-prevent-lfi-and-rfi",level:3},{value:"What are command injections?",id:"what-are-command-injections",level:2},{value:"Security assessment",id:"security-assessment-1",level:3},{value:"What is OS command injection?",id:"what-is-os-command-injection",level:3},{value:"The basics of command injection vulnerabilities",id:"the-basics-of-command-injection-vulnerabilities",level:3},{value:"Example of a command injection",id:"example-of-a-command-injection",level:3},{value:"The differences between command injection and code injection",id:"the-differences-between-command-injection-and-code-injection",level:3},{value:"Testing for command injection attacks",id:"testing-for-command-injection-attacks",level:3},{value:"What is SQL injection?",id:"what-is-sql-injection",level:2},{value:"Security assessment",id:"security-assessment-2",level:3},{value:"What is a SQL injection attack?",id:"what-is-a-sql-injection-attack",level:3},{value:"Prevention guide",id:"prevention-guide",level:3},{value:"Training and awareness",id:"training-and-awareness",level:4},{value:"Filter user input",id:"filter-user-input",level:4},{value:"Use allowlist-based filters",id:"use-allowlist-based-filters",level:4},{value:"Use updated web technologies",id:"use-updated-web-technologies",level:4},{value:"Regular scanning",id:"regular-scanning",level:4},{value:"Practical prevention tips",id:"practical-prevention-tips",level:3},{value:"Filter user input",id:"filter-user-input-1",level:4},{value:"Database mappers",id:"database-mappers",level:4},{value:"Sanitize user input / prepared statements",id:"sanitize-user-input--prepared-statements",level:4}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"what-is-file-inclusion",children:"What is file inclusion?"}),"\n",(0,t.jsx)(n.p,{children:"A file inclusion allows the attacker to include arbitrary files into the web application, resulting in the exposure of sensitive files."}),"\n",(0,t.jsx)(n.h3,{id:"security-assessment",children:"Security assessment"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Security_Assessment_FileInclusion",src:i(85544).Z+"",width:"907",height:"332"})}),"\n",(0,t.jsxs)(n.p,{children:["CVSS vector: ",(0,t.jsxs)(n.a,{href:"https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/CR:H/IR:H/AR:H/MAV:N/MAC:L/MPR:N/MUI:N/MS:U/MC:H/MI:H/MA:H",children:["AV",":N","/AC",":L","/PR",":N","/UI",":N","/S",":U","/C",":H","/I",":H","/A",":H","/CR",":H","/IR",":H","/AR",":H","/MAV",":N"," /MAC",":L","/MPR",":N","/MUI",":N","/MS",":U","/MC",":H","/MI",":H","/MA",":H"]})]}),"\n",(0,t.jsx)(n.h3,{id:"what-is-the-file-inclusion",children:"What is the file inclusion?"}),"\n",(0,t.jsx)(n.p,{children:"A local/remote file inclusion allows the attacker to include arbitrary files into the web application, resulting in the exposure of sensitive files. Sometimes, the attacker can execute malicious code on the web server and take over the machine entirely."}),"\n",(0,t.jsx)(n.h3,{id:"types-of-file-inclusion",children:"Types of file inclusion"}),"\n",(0,t.jsxs)(n.p,{children:["Exploiting a file inclusion vulnerability is possible when an application allows user input to act as a command (also known as dynamic file inclusion). When this happens, an attacker may direct the application to build a path toward a file that contains malicious code and execute the file. Alternatively, it may allow attackers to access files on the server and ",(0,t.jsx)(n.a,{href:"https://crashtest-security.com/sensitive-data-exposure/",children:"steal sensitive data"})," contained in them."]}),"\n",(0,t.jsxs)(n.p,{children:["Programming languages under which file inclusion vulnerabilities frequently occur are PHP, JavaServer Pages (JSP), and ",(0,t.jsx)(n.a,{href:"https://crashtest-security.com/server-side-includes/",children:"Server Side Includes (SSI)"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["This vulnerability is part of the more general injection vulnerability in the ",(0,t.jsx)(n.a,{href:"https://crashtest-security.com/owasp-top-10-2021/",children:"OWASP Top 10 vulnerability list"}),". An attack that uses this vulnerability can potentially lead to ",(0,t.jsx)(n.a,{href:"https://blog.crashtest-security.com/what-exactly-is-...-cross-site-scripting",children:"cross-site scripting (XSS)"}),", ",(0,t.jsx)(n.a,{href:"https://crashtest-security.com/path-traversal-vulnerability/",children:"directory traversal"}),", and ",(0,t.jsx)(n.a,{href:"https://crashtest-security.com/remote-code-execution/",children:"remote code execution"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["A file inclusion exploit arises from using the ",(0,t.jsx)(n.code,{children:"include"})," statement or a similar filesystem functionality, such as the required statement. Developers typically utilize this functionality for several reasons."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When specifying files to be parsed by the interpreter: to open a particular file containing code, and so that the parser can interpret the code, you must specify its path."}),"\n",(0,t.jsx)(n.li,{children:"When printing to a page: to save time and avoid recoding, developers will sometimes reuse certain portions of code, such as headers. In addition, it allows them to specify a file from which contents should be copied and used in the file that contains the include statement."}),"\n",(0,t.jsx)(n.li,{children:"When including files that users will download: to make files available for download, instead of being opened in the web browser, a specific header is included in the request."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"In any of the above cases, if user input is not handled correctly, it can open the door for attackers to include malicious code or gain access to sensitive data."}),"\n",(0,t.jsxs)(n.p,{children:["Attackers exploit two significant file types inclusion vulnerabilities: ",(0,t.jsx)(n.a,{href:"https://crashtest-security.com/lfi-vulnerability-scanner/",children:"local file inclusion (LFI)"})," and ",(0,t.jsx)(n.a,{href:"https://crashtest-security.com/rfi-vulnerability-scanner/",children:"remote file inclusion (RFI)"}),". Here is how they work."]}),"\n",(0,t.jsx)(n.h3,{id:"validating-user-input",children:"Validating user input"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"<?php  \n  \nif(isset($_GET['page']) and $_GET['page'] == 'home') {  \n    include('home.php');  \n}  \nelseif(isset($_GET['page']) and $_GET['page'] == 'news') {  \n    include('news.php');  \n}  \n// some other pages  \n  \n?>\n"})}),"\n",(0,t.jsx)(n.p,{children:"The best way to avoid this vulnerability is to hardcode all files you need to include, as the example above suggests. If you need the inclusion of dynamic files, you could only allow required characters like a-zA-Z and disallow anything else like ./. Maybe an even better solution is to maintain an allowlist of files that are allowed to be included. Any other file that the user requests can be rejected."}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"If you try to implement your filters and pass the filtered user input directly to the various included functions, ensure that your filters can not be bypassed by using methods like string encoding."})}),"\n",(0,t.jsx)(n.h3,{id:"how-to-prevent-lfi-and-rfi",children:"How to prevent LFI and RFI?"}),"\n",(0,t.jsx)(n.p,{children:"You can approach mitigating LFI and preventing RFI exploits in many ways. Proper input validation and sanitization play a part in this, but it is a misconception that this is enough. Ideally, you would best implement the following measures to best prevent file inclusion attacks."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Sanitize user-supplied inputs, including GET/POST and URL parameters, cookie values, and HTTP header values. Apply validation on the server side, not on the client side."}),"\n",(0,t.jsx)(n.li,{children:"Assign IDs to every file path and save them in a secure database to prevent users from viewing or altering the path."}),"\n",(0,t.jsx)(n.li,{children:"Secured files and file types on your allowlist, checked file paths against this list, and ignored everything else. Do not rely on your allowlist validation, as attackers can evade it."}),"\n",(0,t.jsx)(n.li,{children:"Use a database for files that can be compromised instead of storing them on the server."}),"\n",(0,t.jsx)(n.li,{children:"Restrict execution permissions for upload directories as well as upload file sizes."}),"\n",(0,t.jsx)(n.li,{children:"Improve server instructions such as sending download headers automatically instead of executing files in a specified directory."}),"\n",(0,t.jsx)(n.li,{children:"Avoid directory traversal by limiting the API to allow file inclusions only from a specific directory."}),"\n",(0,t.jsx)(n.li,{children:"Run tests to determine if your code is vulnerable to file inclusion exploits."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"what-are-command-injections",children:"What are command injections?"}),"\n",(0,t.jsx)(n.p,{children:"A command injection vulnerability allows an attacker to execute arbitrary system commands, resulting in an entire takeover of the webserver. Learn here how you can prevent command injections."}),"\n",(0,t.jsx)(n.h3,{id:"security-assessment-1",children:"Security assessment"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Security_Assessment_CommandInjection",src:i(84219).Z+"",width:"907",height:"332"})}),"\n",(0,t.jsxs)(n.p,{children:["CVSS vector:  ",(0,t.jsxs)(n.a,{href:"https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/CR:H/IR:H/AR:H/MAV:N/MAC:L/MPR:N/MUI:N/MS:U/MC:H/MI:H/MA:H",children:["AV",":N","/AC",":L","/PR",":N","/UI",":N","/S",":U","/C",":H","/I",":H","/A",":H","/CR",":M","/IR",":M","/AR",":M","/MAV",":N","/MAC ",":L","/MPR",":N","/MUI",":N","/MS",":U","/MC",":H","/MI",":H","/MA",":H"]})]}),"\n",(0,t.jsx)(n.h3,{id:"what-is-os-command-injection",children:"What is OS command injection?"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.a,{href:"https://owasp.org/www-community/attacks/Command_Injection",children:"command injection vulnerability"})," allows attackers to execute arbitrary system commands on the attacked host operating system (OS). Doing this can override the original command to gain access to a system, obtain sensitive data, or even execute an entire takeover of the application server or system."]}),"\n",(0,t.jsx)(n.p,{children:"Some typical examples of command injection attacks include the insertion of harmful files into the runtime environment of the vulnerable application server, shell command execution, and abuse of configuration file vulnerabilities."}),"\n",(0,t.jsx)(n.h3,{id:"the-basics-of-command-injection-vulnerabilities",children:"The basics of command injection vulnerabilities"}),"\n",(0,t.jsx)(n.p,{children:"A command injection attack can occur with web applications that run OS commands to interact with the host and file systems. They execute system commands, start applications in a different language, or execute shell, Python, Perl, or PHP scripts. While this functionality is standard, it can be used for cyber attacks."}),"\n",(0,t.jsxs)(n.p,{children:["The main loophole through which command injection can be executed is when user-supplied input is not validated in applications. This input is used in the construction of commands that will be executed. Such cyber-attacks are possible when a web application passes the unverified user input (cookies, forms, HTTP headers, and the like) directly to OS functions like",(0,t.jsxs)(n.em,{children:["exec()",(0,t.jsx)(n.em,{children:"and"}),"system()"]}),". The input is always a string (string cmd) linked to a constant string of the application, which shapes the full command."]}),"\n",(0,t.jsx)(n.p,{children:"Command injection is also known as shell injection. The arbitrary commands that the attacker applies to the system shell of the web server running the application can compromise all relevant data. The command injection can also attack other systems in the infrastructure connected to and trusted by the initial one. This is how the attacker can use the privileges of the targeted application to gain wider control over the system."}),"\n",(0,t.jsx)(n.p,{children:"Most OS command injections are blind security risks. The targeted application does not return the command output within the HTTP response. Still, blind injections are a security threat and can be used to compromise a system."}),"\n",(0,t.jsx)(n.h3,{id:"example-of-a-command-injection",children:"Example of a command injection"}),"\n",(0,t.jsx)(n.p,{children:"Malicious attackers can escape the ping command by adding a semicolon and executing arbitrary attacker-supplied operating system commands."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"<?php  \n$ip = $_POST['ip'];  \n$cmd = system('ping '.$ip);   \n  \necho $cmd  \n?>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Example input: ",(0,t.jsx)(n.code,{children:"; cat /etc/passwd"})]}),"\n",(0,t.jsxs)(n.p,{children:["To ensure your web application is not vulnerable to command injections, you must validate all user input and only allow commands needed for the task. You can also clean up user input by removing special characters like ",(0,t.jsx)(n.code,{children:";"})," (semicolon), and other shell escapes like ",(0,t.jsx)(n.code,{children:"&"}),", ",(0,t.jsx)(n.code,{children:"&&"}),", ",(0,t.jsx)(n.code,{children:"|"}),", ",(0,t.jsx)(n.code,{children:"||"}),", ",(0,t.jsx)(n.code,{children:"<*"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"There are proven ways to limit the situations in which command injections can be executed in your systems."}),"\n",(0,t.jsx)(n.h3,{id:"the-differences-between-command-injection-and-code-injection",children:"The differences between command injection and code injection"}),"\n",(0,t.jsx)(n.p,{children:"While they seem similar, code injection and command injection are different types of vulnerabilities."}),"\n",(0,t.jsx)(n.p,{children:"Code injection entails an attacker inserting new malicious code into a vulnerable application, which executes. The attack is based on insufficient input validation of the malicious version of user data. Therefore, the code injection attack is limited to the functionalities of the application that is being targeted."}),"\n",(0,t.jsx)(n.p,{children:"In contrast, a command injection is a case when an attacker modifies the default function of the application that executes system commands. Thus, no new code is being inserted. However, with a command injection, an attacker can target the server or systems of the application and other trusted infrastructure by using the compromised privileges for the application."}),"\n",(0,t.jsx)(n.h1,{id:"prevent-attacks",children:"Prevent attacks"}),"\n",(0,t.jsx)(n.p,{children:"Here are the most valuable tips for applying:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Limit the use of shell command execution functions as much as possible."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Employ a trusted API for user input into your application, especially when running system commands such as ",(0,t.jsx)(n.code,{children:"execFile()"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Always validate user input that will be feeding into a shell execution command, which entails having a sound input validation strategy."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Filter potentially problematic special characters by using an allowlist for user input or by targeting command-related terms and delimiters"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Encode user input before using it in commands to avoid command-related characters being read as elements of the command or as a delimiter, as well as malformed inputs"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Parameterize user input or limit it to certain data sections of the command to avoid the input being read as an element of the command"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Ensure users are not able to get control over the name of an application by using ",(0,t.jsx)(n.code,{children:"execFile()"})," securely."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"A command injection vulnerability exists when user-supplied input is not validated correctly by the web application. The following snippet shows PHP code that is vulnerable to command injection."}),"\n",(0,t.jsx)(n.h3,{id:"testing-for-command-injection-attacks",children:"Testing for command injection attacks"}),"\n",(0,t.jsx)(n.p,{children:"Application security is a top priority, so it is essential to routinely check the critical vulnerability risks for your systems."}),"\n",(0,t.jsx)(n.p,{children:"To check for blind command injections, you can use various detection techniques, such as time delays, redirecting output and checking the file manually, or running an OOB network interaction with an external server."}),"\n",(0,t.jsx)(n.p,{children:"You can use some standard parameters to test for operating system command injections:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cmd\nexec\ncommand\nexecute\nping\nquery\njump\ncode\nreg\ndo\nfunc\narg\noption\nload\nprocess\nstep\nread\nfunction\nreq\nfeature\nexe\nmodule\npayload\nrun\nprint\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If you prefer to perform ",(0,t.jsx)(n.a,{href:"https://crashtest-security.com/manual-automated-a-comprehensive-pentesting-strategy/",children:"automated pentesting"})," over manual testing for dangerous software weaknesses, you can use a ",(0,t.jsx)(n.a,{href:"https://crashtest-security.com/dynamic-application-security-testing-dast/",children:"dynamic application security testing tool"})," to check your applications."]}),"\n",(0,t.jsx)(n.h2,{id:"what-is-sql-injection",children:"What is SQL injection?"}),"\n",(0,t.jsx)(n.p,{children:"An SQL injection allows an attacker to run arbitrary SQL code in the database, which may allow him to retrieve, change or delete data from the database."}),"\n",(0,t.jsx)(n.h3,{id:"security-assessment-2",children:"Security assessment"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Security_Assessment_SQLInjection",src:i(89593).Z+"",width:"907",height:"332"})}),"\n",(0,t.jsxs)(n.p,{children:["CVSS vector: ",(0,t.jsxs)(n.a,{href:"https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N",children:["AV",":N","/AC",":L","/PR",":N","/UI",":N","/S",":U","/C",":H","/I",":H","/A",":N"]})]}),"\n",(0,t.jsx)(n.h3,{id:"what-is-a-sql-injection-attack",children:"What is a SQL injection attack?"}),"\n",(0,t.jsx)(n.p,{children:"When a malicious user performs a SQL Injection (SQLi) attack, they typically intend to control the web application database server using malicious SQL statements. This allows them to bypass authentication controls required to access and retrieve the contents of the database. This usually is initiated by hackers scouting the application firewall for vulnerable user input points. Once identified, the attacker creates input content known as a malicious payload, executing unauthorized SQL injection commands at the back-end database."}),"\n",(0,t.jsx)(n.p,{children:"Attackers commonly developed SQL injection commands to perform a wide variety of malicious acts, such as:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Retrieving user credentials within the database."}),"\n",(0,t.jsx)(n.li,{children:"Selecting and outputting crucial system data."}),"\n",(0,t.jsx)(n.li,{children:"Appending or adding new data to a database."}),"\n",(0,t.jsx)(n.li,{children:"Deleting tables and records from the database."}),"\n",(0,t.jsx)(n.li,{children:"Using the back-end database server to access the operating system."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"prevention-guide",children:"Prevention guide"}),"\n",(0,t.jsx)(n.p,{children:"Preventing SQLi attacks is a complex and rigorous process since prevention techniques vary according to the programming language used, the SQL database engine, and the SQLi subtype being addressed. This section explores the tools and best practices to prevent SQL Injection vulnerabilities."}),"\n",(0,t.jsx)(n.p,{children:"Some strategic principles and practices to keep web applications safe from SQLi attacks include:"}),"\n",(0,t.jsx)(n.h4,{id:"training-and-awareness",children:"Training and awareness"}),"\n",(0,t.jsx)(n.p,{children:"Everyone involved in developing and managing the application should understand the risk and impacts of SQL injections. Training should also be extended to users to know why it is essential only to include valid inputs when prompted."}),"\n",(0,t.jsx)(n.h4,{id:"filter-user-input",children:"Filter user input"}),"\n",(0,t.jsx)(n.p,{children:"A database administrator should never trust user input. Internal and public user inputs should be filtered and validated before being exposed to the database server."}),"\n",(0,t.jsx)(n.h4,{id:"use-allowlist-based-filters",children:"Use allowlist-based filters"}),"\n",(0,t.jsx)(n.p,{children:"Attackers constantly develop clever methods to circumvent blocklists. Allowlists help you prevent attacks using a list that only allows certain users to access the protected system. In addition, malicious payloads deployed by SQLi injections cannot execute when they do not exist in the whitelist."}),"\n",(0,t.jsx)(n.h4,{id:"use-updated-web-technologies",children:"Use updated web technologies"}),"\n",(0,t.jsx)(n.p,{children:"Software updates often include patches for discovered vulnerabilities. Hackers typically rely on these vulnerabilities to deploy malicious payloads. The latest patched versions of development environments and frameworks will meet compliance standards and keep the web application safe from exploits. Most software organizations try to stay ahead of hackers."}),"\n",(0,t.jsx)(n.h4,{id:"regular-scanning",children:"Regular scanning"}),"\n",(0,t.jsxs)(n.p,{children:["Attackers inject malicious input through vulnerabilities they discover in the system code. Therefore, security teams should undertake a ",(0,t.jsx)(n.a,{href:"https://crashtest-security.com/test-sql-injection-scanner/",children:"SQL injection scanner"})," because using the right tools to find any possible SQLi vulnerabilities before attackers can take advantage of them."]}),"\n",(0,t.jsx)(n.h3,{id:"practical-prevention-tips",children:"Practical prevention tips"}),"\n",(0,t.jsx)(n.h4,{id:"filter-user-input-1",children:"Filter user input"}),"\n",(0,t.jsx)(n.p,{children:"For an attacker to successfully execute an SQL injection, he needs to plant some code run by the web application database. Therefore, all user input should be validated first and limited to the required characters. E.g., you may ask a user to input a username, password, and e-mail address in a registration form. You can limit the allowed characters of these input fields to characters that do not interfere with the database. The following example filters out user input for the three values in PHP:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'if (preg_match("/[^A-Za-z0-9]/", $username) ||  \n  (preg_match("/[^A-Za-z0-9\\!_-]/", $password) ||  \n  (preg_match("/[^A-Za-z0-9_-@]/", $email)) {  \n    echo "Invalid Characters!";  \n} else {  \n    # Run Database Command  \n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"database-mappers",children:"Database mappers"}),"\n",(0,t.jsx)(n.p,{children:"Most modern web frameworks provide some abstraction of database handling. E.g., Laravel provides Eloquent queries. Created objects are automatically converted and stored or retrieved from the database. In the example of the user registration form, one could make the user object in the following way:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"$user = new User;  \n$user->username = $request->username;  \n$user->password = $request->password;  \n$user->email = $request->email;  \n$user->save();\n"})}),"\n",(0,t.jsx)(n.p,{children:"The resulting SQL statement is automatically sanitized and will prevent SQL injections."}),"\n",(0,t.jsx)(n.h4,{id:"sanitize-user-input--prepared-statements",children:"Sanitize user input / prepared statements"}),"\n",(0,t.jsx)(n.p,{children:"It may not always be possible to use a database mapper. In these cases, use prepared statements to create your SQL queries. These statements validate and sanitize the user-provided values and prevent SQL injections. E.g., in PHP, you can make a prepared account the following way:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'$stmt = $mysqli->prepare("INSERT INTO users(username, password, email) VALUES (?, ?, ?)");  \n$stmt->bind_param("sss", $username, $password, $email) # "sss" here states, that three strings are expected.  \n$username = $request->username;  \n$password = $request->password;  \n$email = $request->email;  \n$stmt->execute();\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},84219:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/Security_Assessment_CommandInjection-5e768f5aa4644206bd378da1a0693a4e.png"},85544:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/Security_Assessment_FileInclusion-c7e6d3231e73be2155ad3f096b6768b9.png"},89593:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/Security_Assessment_SQLInjection-23559ba1fa185b04479e0b375b09ecc7.png"},11151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>r});var t=i(67294);const s={},a=t.createContext(s);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);