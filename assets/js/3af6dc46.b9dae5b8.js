"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[75790],{34100:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var i=s(85893),n=s(11151);const r={title:"Prevent Cross-Site Request Forgery (CSRF) attacks",slug:"/r/cross-site-request-forgery"},o=void 0,a={id:"guides/dynamic_analysis/dast_essentials/dast_essentials_xss/cross-site-request-forgery",title:"Prevent Cross-Site Request Forgery (CSRF) attacks",description:"Cross-Site Request Forgery (CSRF) allows an attacker to perform actions in a different security context, such as another logged-in user. Read here how you can efficiently fix a CSRF vulnerability.",source:"@site/docs/guides/08_dynamic_analysis/15_dast_essentials/07_dast_essentials_xss/04_cross-site-request-forgery.md",sourceDirName:"guides/08_dynamic_analysis/15_dast_essentials/07_dast_essentials_xss",slug:"/r/cross-site-request-forgery",permalink:"/km-docusaurus-test/r/cross-site-request-forgery",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Prevent Cross-Site Request Forgery (CSRF) attacks",slug:"/r/cross-site-request-forgery"},sidebar:"tutorialSidebar",previous:{title:"About cross-site scripting (XSS) attacks",permalink:"/km-docusaurus-test/r/cross-site-scripting"},next:{title:"Prevent SSL and TLS attacks",permalink:"/km-docusaurus-test/r/ssl-tls-vulnerabilities"}},c={},l=[{value:"Security assessment",id:"security-assessment",level:2},{value:"Vulnerability information",id:"vulnerability-information",level:2},{value:"Prevent attacks",id:"prevent-attacks",level:2},{value:"Token-based prevention",id:"token-based-prevention",level:3},{value:"Common CSRF token vulnerabilities",id:"common-csrf-token-vulnerabilities",level:3},{value:"Double-submit cookie prevention",id:"double-submit-cookie-prevention",level:3},{value:"Same-site cookie prevention",id:"same-site-cookie-prevention",level:2},{value:"Custom request header",id:"custom-request-header",level:3},{value:"Django",id:"django",level:3},{value:"Laravel",id:"laravel",level:3}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Cross-Site Request Forgery (CSRF) allows an attacker to perform actions in a different security context, such as another logged-in user. Read here how you can efficiently fix a CSRF vulnerability."}),"\n",(0,i.jsx)(t.h2,{id:"security-assessment",children:"Security assessment"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Security_Assessment_CSRF",src:s(23729).Z+"",width:"907",height:"332"})}),"\n",(0,i.jsxs)(t.p,{children:["CVSS vector:  ",(0,i.jsxs)(t.a,{href:"https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N",children:["AV",":N","/AC",":L","/PR",":N","/UI",":R","/S",":U","/C",":N","/I",":L","/A",":N"]})]}),"\n",(0,i.jsx)(t.h2,{id:"vulnerability-information",children:"Vulnerability information"}),"\n",(0,i.jsxs)(t.p,{children:["This type of attack, also known as CSRF or XSRF, Cross-Site Reference Forgery, Hostile Linking, and more, allow an attacker to carry out actions (requests) within an application where a user is currently logged in. It is cross-site or cross-origin because it uses different websites or elements to interfere, i.e., to send requests within an application that originate from outside the application. A CSRF sends an HTTP request whenever a user opens a website containing malicious code to achieve its aim. The code is embedded so that no further actions by the user are required. This kind of attack is widely used in spam emails. The attack starts and forges actions by selecting a malicious URL. The HTTP requests might access, ",(0,i.jsx)(t.a,{href:"https://crashtest-security.com/sensitive-data-exposure/",children:"modify, or delete sensitive data"})," and the user is not aware of this activity."]}),"\n",(0,i.jsx)(t.p,{children:"While CSRF attacks mainly occur through user browsers, they can effectively be executed through any file that allows scripting, including word and XML documents, RSS feeds, and more. For additional information, see CSRF Scanner to discover Cross-Site Request Forgery vulnerabilities to which you might be exposed. It only takes 2 minutes to scan your web application, and it is free!"}),"\n",(0,i.jsx)(t.h2,{id:"prevent-attacks",children:"Prevent attacks"}),"\n",(0,i.jsx)(t.p,{children:"To prevent CSRF injection attacks, you must ensure that an attacker cannot craft an arbitrary request run in the security context of any other user and send from a different website. This is one of the main conditions that need to be in place for a CSRF attack to be successful. Disrupting this condition prevents the possibility of such an attack."}),"\n",(0,i.jsx)(t.h3,{id:"token-based-prevention",children:"Token-based prevention"}),"\n",(0,i.jsx)(t.p,{children:"As stated by the OWASP Cross-Site Request Forgery Prevention Cheat Sheet, the most common mitigation technique for cross-site request forgery attacks is using a CSRF token (also known as a synchronizer token or anti-CSRF token). These session tokens are unpredictable and unique values are generated by the application and sent to the client. After that, they are sent back in the request made by the client to the server, which verifies the request."}),"\n",(0,i.jsx)(t.p,{children:"This introduces an unknown element that can effectively defuse the CSRF attack. Any request not originating from the original form will not include the correct value for the CSRF token and can be easily discarded."}),"\n",(0,i.jsx)(t.h3,{id:"common-csrf-token-vulnerabilities",children:"Common CSRF token vulnerabilities"}),"\n",(0,i.jsx)(t.p,{children:"Yet, some vulnerabilities can arise in using CSRF tokens due to omissions in the procedure. The most common CSRF token vulnerabilities include:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Tokens are validated and used only when POST requests and not GET requests are made"}),"\n",(0,i.jsx)(t.li,{children:"Validation occurs only if the session token is present, and if it is omitted, verification is also skipped"}),"\n",(0,i.jsx)(t.li,{children:"Tokens are not tied to the current user session but are compared to tokens issued at any point by the application"}),"\n",(0,i.jsx)(t.li,{children:"Tokens are connected to a cookie but not one that is used to track the current session"}),"\n",(0,i.jsx)(t.li,{children:"Applications do not maintain a record of tokens. Instead, the token is included in the cookie, and the application verifies that the token in the request is the same as the one in the cookie."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"All of the above constitute vulnerabilities that can open the door to a CSRF attack. To defend against such an attack, CSRF tokens need to be implemented correctly, along with several other mitigation techniques."}),"\n",(0,i.jsx)(t.p,{children:"Using modern frameworks, tokens-based CSRF protection is typically included or can easily be added to forms and validated by the corresponding middleware. Furthermore, for single-page applications, the CSRF token may be provided by a meta tag which is then read from the JavaScript in the browser and amended to every request."}),"\n",(0,i.jsx)(t.h3,{id:"double-submit-cookie-prevention",children:"Double-submit cookie prevention"}),"\n",(0,i.jsx)(t.p,{children:"A double-submit cookie token approach can be used if using a valid token on the server side is impossible. In this cookie-based session handling, when a user visits a website, the site generates a value that is stored as a cookie on the user device, apart from the cookie that serves as a session identifier."}),"\n",(0,i.jsx)(t.p,{children:"When a legitimate request is submitted to the site, it must contain the same value as included in the cookie. The server then verifies this, and the request parameter is accepted if the values match."}),"\n",(0,i.jsx)(t.h2,{id:"same-site-cookie-prevention",children:"Same-site cookie prevention"}),"\n",(0,i.jsx)(t.p,{children:"As recommended by OWASP, this approach should be used with a CSRF token strategy and not as a substitute."}),"\n",(0,i.jsx)(t.p,{children:"The same-site cookie approach restricts the origin from which a cookie can be sent. Thus, CSRF exploits the possibility of making a cross-origin request (and hence same-site cookies). However, limiting requests so they can only be sent from the origin to which a cookie is related prevents the ability to send external requests to an application."}),"\n",(0,i.jsx)(t.h3,{id:"custom-request-header",children:"Custom request header"}),"\n",(0,i.jsx)(t.p,{children:"A technique that is particularly effective for AJAX or API endpoints is custom request headers. In this approach, JavaScript is used to add a custom header. Unfortunately, JavaScript cannot make cross-origin requests with a custom header because of the SOP security restrictions."}),"\n",(0,i.jsx)(t.p,{children:"This prevents sending a cross-domain request with custom headers, eliminating the possibility of a CSRF attack."}),"\n",(0,i.jsx)(t.h3,{id:"django",children:"Django"}),"\n",(0,i.jsxs)(t.p,{children:["Django is similarly easy to protect any form by a CSRF-Token using the snippet within the ",(0,i.jsx)(t.code,{children:"<form></form>"})," tags."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"{% raw %} {% csrf_token %} {% endraw %}\n"})}),"\n",(0,i.jsx)(t.p,{children:"To provide the token for use with JavaScript requests, retrieve it from its storage cookie and add it to the request."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"var csrftoken = Cookies.get('csrftoken');  \n...  \nxhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\n"})}),"\n",(0,i.jsxs)(t.p,{children:["See the ",(0,i.jsx)(t.a,{href:"https://docs.djangoproject.com/en/2.0/ref/csrf/",children:"Django documentation"})," for more detailed examples."]}),"\n",(0,i.jsx)(t.h3,{id:"laravel",children:"Laravel"}),"\n",(0,i.jsxs)(t.p,{children:["To protect forms in Laravel, include the following code within the ",(0,i.jsx)(t.code,{children:"<form></form>"})," tags."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"{% raw %} {{ csrf_field() }} {% endraw %}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["For JavaScript requests, the file resources/assets/js/bootstrap.js automatically configures the CSRF-token meta tag, which the Axios HTTP library will use. If you are not using this library, check the ",(0,i.jsx)(t.a,{href:"https://laravel.com/docs/5.5/csrf",children:"Laravel documentation"})," for more information."]})]})}function h(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},23729:(e,t,s)=>{s.d(t,{Z:()=>i});const i=s.p+"assets/images/Security_Assessment_CSRF-79b1e34b6263c6f8dbb93bfc7675ffe5.png"},11151:(e,t,s)=>{s.d(t,{Z:()=>a,a:()=>o});var i=s(67294);const n={},r=i.createContext(n);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);