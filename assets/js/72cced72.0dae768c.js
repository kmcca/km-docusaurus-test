"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[30953],{74809:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var a=n(85893),t=n(11151);const i={title:"Integrate Static Analysis in your CI/CD with the CLI",slug:"/r/veracode_cli_static_analysis_integration"},r=void 0,c={id:"guides/cli/integrations/cli_integrate_sast_cicd",title:"Integrate Static Analysis in your CI/CD with the CLI",description:"You can integrate the Veracode CLI with your CI/CD pipelines to identify security flaws as part of the software development process.",source:"@site/docs/guides/13_cli/04_integrations/01_cli_integrate_sast_cicd.md",sourceDirName:"guides/13_cli/04_integrations",slug:"/r/veracode_cli_static_analysis_integration",permalink:"/km-docusaurus-test/r/veracode_cli_static_analysis_integration",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Integrate Static Analysis in your CI/CD with the CLI",slug:"/r/veracode_cli_static_analysis_integration"},sidebar:"tutorialSidebar",previous:{title:"Integrate the CLI with your CI/CD",permalink:"/km-docusaurus-test/r/Integrate_the_CLI_with_your_CICD"},next:{title:"Veracode APIs",permalink:"/km-docusaurus-test/r/Veracode_APIs"}},o={},l=[{value:"Getting started",id:"getting-started",level:2},{value:"1. Get API credentials",id:"1-get-api-credentials",level:3},{value:"2. Build your code",id:"2-build-your-code",level:3},{value:"3. Scan your code",id:"3-scan-your-code",level:3},{value:"Examples",id:"examples",level:2},{value:"Azure DevOps",id:"azure-devops",level:3},{value:"GitHub",id:"github",level:3},{value:"GitLab",id:"gitlab",level:3},{value:"Jenkins",id:"jenkins",level:3},{value:"Configure GitLab to generate issues",id:"configure-gitlab-to-generate-issues",level:2},{value:"Create an access token",id:"create-an-access-token",level:3},{value:"Add environment variables for Java applications",id:"add-environment-variables-for-java-applications",level:3},{value:"Add a <code>GITLAB_URL</code> variable for custom domains",id:"add-a-gitlab_url-variable-for-custom-domains",level:3}];function d(e){const s={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.p,{children:"You can integrate the Veracode CLI with your CI/CD pipelines to identify security flaws as part of the software development process."}),"\n",(0,a.jsxs)(s.p,{children:["You add a job to your pipeline that runs the ",(0,a.jsx)(s.a,{href:"/km-docusaurus-test/r/veracode_static_scan",children:(0,a.jsx)(s.code,{children:"static scan"})})," command. This\ncommand causes the job to fail if the analysis finds flaws that match your specified criteria."]}),"\n",(0,a.jsx)(s.h2,{id:"getting-started",children:"Getting started"}),"\n",(0,a.jsxs)(s.p,{children:["Locate a project you want to scan and ensure it meets the packaging requirements. If you do not have a project to scan,",(0,a.jsx)(s.br,{}),"\n","Veracode provides the demo applications ",(0,a.jsx)(s.a,{href:"https://github.com/veracode/verademo-dotnet",children:"VeraDemoDotNet"}),"\nand ",(0,a.jsx)(s.a,{href:"https://github.com/veracode/verademo",children:"VeraDemo"})," on GitHub that  you can use for testing purposes."]}),"\n",(0,a.jsx)(s.p,{children:"To get started using static analysis scanning in a pipeline, follow these steps:"}),"\n",(0,a.jsx)(s.h3,{id:"1-get-api-credentials",children:"1. Get API credentials"}),"\n",(0,a.jsxs)(s.p,{children:["Before using the following examples, the Veracode CLI requires you to have working ",(0,a.jsx)(s.a,{href:"/km-docusaurus-test/r/c_api_credentials3",children:"API credentials"}),".\nAfter ",(0,a.jsx)(s.a,{href:"/km-docusaurus-test/r/c_api_credentials3",children:"generating credentials"}),", you must ",(0,a.jsx)(s.a,{href:"/km-docusaurus-test/r/Install_the_Veracode_CLI#add-your-credentials",children:"configure them"}),"\nwith the CLI. The examples below use environment variables, but you can use a configuration file as well. Veracode recommends that\nyou store the credentials as secrets or masked variables depending on your CI/CD platform."]}),"\n",(0,a.jsx)(s.h3,{id:"2-build-your-code",children:"2. Build your code"}),"\n",(0,a.jsxs)(s.p,{children:["Before you can scan, you must build and package your code.\nSee the ",(0,a.jsx)(s.a,{href:"/km-docusaurus-test/r/compilation_packaging",children:"packaging requirements"})," to determine the necessary steps. Then, in your pipeline,\nadd a stage for the build process and pass the build artifacts to the scan job."]}),"\n",(0,a.jsx)(s.h3,{id:"3-scan-your-code",children:"3. Scan your code"}),"\n",(0,a.jsxs)(s.p,{children:["Before you can run a scan, you must ",(0,a.jsx)(s.a,{href:"/km-docusaurus-test/r/Install_the_Veracode_CLI#install-or-upgrade-the-cli",children:"install the CLI"}),"."]}),"\n",(0,a.jsx)(s.p,{children:"Then run a scan:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"./veracode static scan <source> [flags]\n"})}),"\n",(0,a.jsxs)(s.p,{children:["You use ",(0,a.jsx)(s.code,{children:"flags"})," to configure the scan. For example, you can add a flag to fail the job when the scan finds flaws. For the list of flags, see the ",(0,a.jsx)(s.a,{href:"/km-docusaurus-test/r/veracode_static_scan",children:(0,a.jsx)(s.code,{children:"static scan"})})," command."]}),"\n",(0,a.jsx)(s.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(s.p,{children:"The following examples show how to set up a static analysis scan job for common CI/CD platforms:"}),"\n",(0,a.jsx)(s.h3,{id:"azure-devops",children:"Azure DevOps"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-yaml",children:'trigger:\n  - main\npool:\n  vmImage: "ubuntu-latest"\nsteps:\n  - task: \n    # build here\n  - task: CmdLine@2\n    displayName: Veracode static scan\n    inputs:\n      script: |\n        curl -fsS https://tools.veracode.com/veracode-cli/install | sh\n        ./veracode static scan verademo.war\n    env: \n      VERACODE_API_KEY_ID: $(myVeracodeId)\n      VERACODE_API_KEY_SECRET: $(myVeracodeSecret)\n'})}),"\n",(0,a.jsx)(s.h3,{id:"github",children:"GitHub"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-yaml",children:"name: static-scan\non: push\njobs:\n  build:\n    # build here\n  static-scan:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Download Veracode CLI\n        uses: wei/curl@master\n        with:\n          args: -fsS https://tools.veracode.com/veracode-cli/install | sh\n      - name: Run a static scan\n        run: ./veracode static scan verademo.war\n        env:\n          VERACODE_API_KEY_ID: ${{ secrets.myVeracodeId }}\n          VERACODE_API_KEY_SECRET: ${{ secrets.myVeracodeSecret }}\n"})}),"\n",(0,a.jsx)(s.h3,{id:"gitlab",children:"GitLab"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-yaml",children:"image: ubuntu-latest\nstages:\n  - build\n  - scan\nbuild_job:\n  # build here\nstatic_scan:\n  stage: scan\n  dependencies:\n    - build_job\n  script:\n    - curl -fsS https://tools.veracode.com/veracode-cli/install | sh\n    - ./veracode static scan verademo.war\n  variables:\n    VERACODE_API_KEY_ID: ${myVeracodeId}\n    VERACODE_API_KEY_SECRET: ${myVeracodeSecret}\n"})}),"\n",(0,a.jsx)(s.h3,{id:"jenkins",children:"Jenkins"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-groovy",children:"pipeline {\n  agent { label <'ubuntu-latest'> }\n  environment {\n    VERACODE_API_KEY_ID = '${myVeracodeId}'\n    VERACODE_API_KEY_SECRET = '${myVeracodeSecret}'\n  }\n  stages {\n    stage('Build') {\n      // build here\n    }\n    stage('Veracode static scan') {\n      steps {\n        sh 'curl -fsS https://tools.veracode.com/veracode-cli/install | sh'\n        sh './veracode static scan verademo.war'\n      }\n    }\n  }\n}\n"})}),"\n",(0,a.jsx)(s.h2,{id:"configure-gitlab-to-generate-issues",children:"Configure GitLab to generate issues"}),"\n",(0,a.jsxs)(s.p,{children:["To use the ",(0,a.jsx)(s.a,{href:"/km-docusaurus-test/r/veracode_static_scan#flags",children:(0,a.jsx)(s.code,{children:"--gl-issue-generation"})})," flag with the ",(0,a.jsx)(s.code,{children:"veracode static scan"})," command to automatically generate issues in GitLab from discovered flaws, you must create a GitLab access token. For Java applications, you must also add environment variables in GitLab for the base directories."]}),"\n",(0,a.jsx)(s.h3,{id:"create-an-access-token",children:"Create an access token"}),"\n",(0,a.jsx)(s.p,{children:"To enable the Veracode CLI to generate GitLab issues from discovered flaws, create a GitLab access token and add it as an environment variable in your GitLab project."}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"To complete this task:"})}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:["Select ",(0,a.jsx)(s.strong,{children:"Edit Profile > Access Tokens > Create personal access token"}),"."]}),"\n",(0,a.jsxs)(s.li,{children:["Ensure that the token has a scope of ",(0,a.jsx)(s.code,{children:"api"}),". See the ",(0,a.jsx)(s.a,{href:"https://docs.gitlab.com/",children:"GitLab documentation"}),"."]}),"\n",(0,a.jsxs)(s.li,{children:["Select ",(0,a.jsx)(s.strong,{children:"Settings > CI/CD > Variables"})," and store the token you created as an environment variable named ",(0,a.jsx)(s.code,{children:"PRIVATE_TOKEN"}),"."]}),"\n"]}),"\n",(0,a.jsx)(s.h3,{id:"add-environment-variables-for-java-applications",children:"Add environment variables for Java applications"}),"\n",(0,a.jsxs)(s.p,{children:["To use the ",(0,a.jsx)(s.a,{href:"/km-docusaurus-test/r/veracode_static_scan#flags",children:(0,a.jsx)(s.code,{children:"--gl-issue-generation"})})," flag to generate issues for Java applications, add environment variables for the GitLab base directories."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"To complete this task:"})}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:["In GitLab, go to your project and select ",(0,a.jsx)(s.strong,{children:"Settings > CI/CD > Variables"}),"."]}),"\n",(0,a.jsxs)(s.li,{children:["Add the following environment variables:","\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"SRC_ROOT"}),": the filepath typically is ",(0,a.jsx)(s.code,{children:"/src/main/java/"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"JSP_ROOT"}),": the filepath typically is ",(0,a.jsx)(s.code,{children:"/src/main/webapp/"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.h3,{id:"add-a-gitlab_url-variable-for-custom-domains",children:["Add a ",(0,a.jsx)(s.code,{children:"GITLAB_URL"})," variable for custom domains"]}),"\n",(0,a.jsxs)(s.p,{children:["To use the ",(0,a.jsx)(s.a,{href:"/km-docusaurus-test/r/veracode_static_scan#flags",children:(0,a.jsx)(s.code,{children:"--gl-issue-generation"})})," flag with a custom domain, in your project, add a ",(0,a.jsx)(s.code,{children:"GITLAB_URL"})," CI/CD variable for the base URL. For example:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{children:"GITLAB_URL=https://{CUSTOM_URL}/api/v4/projects/\n"})}),"\n",(0,a.jsxs)(s.p,{children:["The default value is ",(0,a.jsx)(s.code,{children:"https://gitlab.com/api/v4/projects/"})]})]})}function u(e={}){const{wrapper:s}={...(0,t.a)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},11151:(e,s,n)=>{n.d(s,{Z:()=>c,a:()=>r});var a=n(67294);const t={},i=a.createContext(t);function r(e){const s=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(i.Provider,{value:s},e.children)}}}]);