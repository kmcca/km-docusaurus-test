"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[46068],{67248:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>n,metadata:()=>r,toc:()=>l});var a=s(85893),i=s(11151);const n={title:"Prevent authentication and session management attacks",slug:"/r/broken-authentication-and-session-management"},o=void 0,r={id:"guides/dynamic_analysis/dast_essentials/dast_essentials_misc/broken-authentication-and-session-management",title:"Prevent authentication and session management attacks",description:"Broken Authentication and Session Management could expose user data, such as credentials or critical private data. It could also allow for privilege escalation attacks.",source:"@site/docs/guides/08_dynamic_analysis/15_dast_essentials/09_dast_essentials_misc/05_broken-authentication-and-session-management.md",sourceDirName:"guides/08_dynamic_analysis/15_dast_essentials/09_dast_essentials_misc",slug:"/r/broken-authentication-and-session-management",permalink:"/km-docusaurus-test/r/broken-authentication-and-session-management",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Prevent authentication and session management attacks",slug:"/r/broken-authentication-and-session-management"},sidebar:"tutorialSidebar",previous:{title:"Prevent XML External Entity (XXE) processing attacks",permalink:"/km-docusaurus-test/r/xxe-processing"},next:{title:"Prevent insecure deserialization attacks",permalink:"/km-docusaurus-test/r/insecure-deserialization"}},c={},l=[{value:"Broken authentication and session management vulnerabilities",id:"broken-authentication-and-session-management-vulnerabilities",level:2},{value:"Security assessment",id:"security-assessment",level:2},{value:"Best practices: Prevent broken authentication and session management attacks",id:"best-practices-prevent-broken-authentication-and-session-management-attacks",level:2},{value:"Best practices to protect applications",id:"best-practices-to-protect-applications",level:2},{value:"Enable multi-factor authentication",id:"enable-multi-factor-authentication",level:3},{value:"Implement Strong Password Policies",id:"implement-strong-password-policies",level:3},{value:"Utilize virtual private vetworks (VPNs)",id:"utilize-virtual-private-vetworks-vpns",level:3},{value:"Use a web application firewall (WAF)",id:"use-a-web-application-firewall-waf",level:3},{value:"Limit failed login attempts",id:"limit-failed-login-attempts",level:3},{value:"Secure session access",id:"secure-session-access",level:3}];function d(e){const t={a:"a",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"Broken Authentication and Session Management could expose user data, such as credentials or critical private data. It could also allow for privilege escalation attacks."}),"\n",(0,a.jsx)(t.h2,{id:"broken-authentication-and-session-management-vulnerabilities",children:"Broken authentication and session management vulnerabilities"}),"\n",(0,a.jsx)(t.p,{children:"Exploiting a broken authentication, an attack is typically initiated by taking advantage of poorly managed credentials and login sessions to masquerade as authenticated users. This usually is related to a scenario as follows:"}),"\n",(0,a.jsx)(t.p,{children:"A session is a succession of events and transactions that are associated with the same user for a certain time frame. Once a user has logged on to a system, they are granted a unique Session ID (Cookies, URL Parameters, Authentication Tokens, etc.) that allows for communication between the user and web app for the valid session. Many developers fail to develop the right parameters for sessions, making it easier for hackers to hijack the session ID and gain unauthorized system access. Additionally, some developers fail to set time restrictions and session rotation plans, allowing attackers to impersonate users already logged in to the system."}),"\n",(0,a.jsx)(t.p,{children:"With companies moving more of their sensitive and valuable data to the cloud, hackers are increasingly targeting web applications for their attacks. As a result, broken authentication and session management vulnerabilities were considered the Top 2 vulnerabilities on the OWASP list in 2017 since using valid user credentials is the easiest way for attackers to access off-limits systems."}),"\n",(0,a.jsx)(t.p,{children:"Such attacks are also easier and more popular with modern attackers since the vulnerabilities are often neglected by software companies."}),"\n",(0,a.jsx)(t.p,{children:"These malicious actors rely on a number of techniques to steal credentials, guess them, or deceive users into revealing them, including:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Phishing"}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://owasp.org/www-community/attacks/Credential_stuffing",children:"Credential stuffing"})}),"\n",(0,a.jsx)(t.li,{children:"Password spraying"}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"An attack is typically initiated by exploiting a broken authentication by taking advantage of poorly managed credentials and login sessions to masquerade as authenticated users. This usually is related to a scenario as follows:"}),"\n",(0,a.jsx)(t.p,{children:"A session is a succession of events and transactions associated with the same user for a specific time frame. Once a user has logged on to a system, they are granted a unique Session ID (Cookies, URL Parameters, Authentication Tokens, etc.) that allows communication between the user and web app for the valid session. Unfortunately, many developers fail to develop the correct session parameters, making it easier for hackers to hijack the session ID and gain unauthorized system access. Additionally, some developers fail to set time restrictions and session rotation plans, allowing attackers to impersonate users already logged in to the system."}),"\n",(0,a.jsx)(t.p,{children:"With companies moving more sensitive and valuable data to the cloud, hackers increasingly target web applications for their attacks. As a result, broken authentication and session management vulnerabilities are considered the Top 2 vulnerabilities on the OWASP list since using a valid user credentials is the easiest way for attackers to access off-limits systems."}),"\n",(0,a.jsx)(t.p,{children:"Such attacks are also more accessible and popular with modern attackers since software companies often neglect the vulnerabilities."}),"\n",(0,a.jsx)(t.p,{children:"These malicious actors rely on several techniques to steal credentials, guess them, or deceive users into revealing them, including:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Phishing"}),"\n",(0,a.jsx)(t.li,{children:"Credential stuffing"}),"\n",(0,a.jsx)(t.li,{children:"Password spraying"}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"security-assessment",children:"Security assessment"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"SecurityAssessment_BrokenAuthentication",src:s(6866).Z+"",width:"800",height:"324"})}),"\n",(0,a.jsxs)(t.p,{children:["CVSS vector: ",(0,a.jsxs)(t.a,{href:"https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",children:["AV",":N","/AC",":H","/PR",":N","/UI",":N","/S",":U","/C",":L","/I",":L","/A",":N"]})]}),"\n",(0,a.jsx)(t.h2,{id:"best-practices-prevent-broken-authentication-and-session-management-attacks",children:"Best practices: Prevent broken authentication and session management attacks"}),"\n",(0,a.jsx)(t.p,{children:"While they are known and highly preventable, broken authentication and session management attacks are common due to software teams ignoring the vulnerabilities. There are also proven practices that organizations can use to reduce the chances of such attacks."}),"\n",(0,a.jsx)(t.p,{children:"Following are some best practices and popular tools that can help an organization avoid susceptibility to session-management attacks."}),"\n",(0,a.jsx)(t.h2,{id:"best-practices-to-protect-applications",children:"Best practices to protect applications"}),"\n",(0,a.jsx)(t.p,{children:"While it is impractical to point out and remediate each instance of broken authentication vulnerabilities, the following minimum security measures form the foundation of successful session management:"}),"\n",(0,a.jsx)(t.h3,{id:"enable-multi-factor-authentication",children:"Enable multi-factor authentication"}),"\n",(0,a.jsx)(t.p,{children:"Multi-Factor Authentication (MFA) makes it harder for malicious actors to access a system by adding at least one more layer of security to the authentication process. With MFA, security teams can enable users to register an item, such as a cellphone or biometric data, then combine it with the traditional login process for stronger security checks. With MFA, software organizations can bolster application security without impacting user experience."}),"\n",(0,a.jsx)(t.h3,{id:"implement-strong-password-policies",children:"Implement Strong Password Policies"}),"\n",(0,a.jsxs)(t.p,{children:["It is important to select an Identity and Access (IAM) management solution that helps users easily create strong, unique, and effective passwords. These platforms automatically reject weak, common passwords and follow the ",(0,a.jsx)(t.a,{href:"https://www.nist.gov/cyberframework",children:"NIST guidelines"})," on creating passwords that are difficult to replicate. Most trusted IAM solutions also notify administrators when weak passwords have been compromised."]}),"\n",(0,a.jsx)(t.h3,{id:"utilize-virtual-private-vetworks-vpns",children:"Utilize virtual private vetworks (VPNs)"}),"\n",(0,a.jsx)(t.p,{children:"VPNs greatly reduce the risk of credentials for your organization from being leaked to malicious actors by encrypting personal information, financial transactions, and web sessions. VPNs conceal the IP address of machines communicating in a session, reducing the likelihood of identity theft. With VPNs, even if hackers orchestrate a man-in-the-middle attack, it gets difficult for them to make sense of the message being transmitted."}),"\n",(0,a.jsx)(t.h3,{id:"use-a-web-application-firewall-waf",children:"Use a web application firewall (WAF)"}),"\n",(0,a.jsx)(t.p,{children:"A Web Application Firewall helps boost application security by identifying and blocking malicious IP addresses while also scanning web traffic for threats and vulnerabilities. WAFs are highly customizable, which allows teams to create site-specific rules for their applications. A WAF is typically deployed through a reverse proxy to inspect every packet to pinpoint harmful traffic that may compromise the system."}),"\n",(0,a.jsx)(t.h3,{id:"limit-failed-login-attempts",children:"Limit failed login attempts"}),"\n",(0,a.jsx)(t.p,{children:"When implementing Brute-Force/Credential stuffing attacks, hackers are motivated by the fact that their attempts go undetected to attempt multiple logins. To mitigate such incidents, the Identity and Access management system must be configured to flag suspicious behavior and limit the number of login attempt(s)."}),"\n",(0,a.jsx)(t.h3,{id:"secure-session-access",children:"Secure session access"}),"\n",(0,a.jsx)(t.p,{children:"Developers and security teams should tailor session length and parameters to the specific use case for the organization. A streaming video service, for instance, can have week-long sessions so that users do not have to pass authentication checks every time they log in. A banking app, on the other hand, should terminate its session immediately after a customer exits since they are more likely to be hijacked."}),"\n",(0,a.jsx)(t.p,{children:"Session IDs should also be frequently rotated and invalidated to prevent session fixation for other users. They should not be exposed in the URL (e.g., allowing URL rewriting)."})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},6866:(e,t,s)=>{s.d(t,{Z:()=>a});const a=s.p+"assets/images/SecurityAssessment_BrokenAuthentication-427c194da5d76ae9341f31f21ef13783.png"},11151:(e,t,s)=>{s.d(t,{Z:()=>r,a:()=>o});var a=s(67294);const i={},n=a.createContext(i);function o(e){const t=a.useContext(n);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(n.Provider,{value:t},e.children)}}}]);