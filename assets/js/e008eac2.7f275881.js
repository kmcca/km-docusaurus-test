"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[46884],{68337:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=t(85893),a=t(11151);const i={title:"C# HMAC signing example",slug:"/r/c_hmac_signing_example_c_sharp"},s=void 0,o={id:"guides/apis/apis_hmac_auth/hmac_signing_example_csharp",title:"C# HMAC signing example",description:"This is a C# example of how to enable HMAC signing within your application to authenticate with Veracode when using the APIs.",source:"@site/docs/guides/14_apis/03_apis_hmac_auth/03_hmac_signing_example_csharp.md",sourceDirName:"guides/14_apis/03_apis_hmac_auth",slug:"/r/c_hmac_signing_example_c_sharp",permalink:"/km-docusaurus-test/r/c_hmac_signing_example_c_sharp",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"C# HMAC signing example",slug:"/r/c_hmac_signing_example_c_sharp"},sidebar:"tutorialSidebar",previous:{title:"Python HMAC signing example",permalink:"/km-docusaurus-test/r/c_hmac_signing_example_python"},next:{title:"Troubleshooting HMAC",permalink:"/km-docusaurus-test/r/Troubleshooting_HMAC"}},c={},u=[{value:"<code>HmacAuthHeader.cs</code>",id:"hmacauthheadercs",level:2},{value:"<code>Program.cs</code>",id:"programcs",level:2},{value:"<code>appsettings.json</code>",id:"appsettingsjson",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This is a C# example of how to enable HMAC signing within your application to authenticate with Veracode when using the APIs."}),"\n",(0,r.jsxs)(n.p,{children:["You can download the code for this example from ",(0,r.jsx)(n.a,{href:"https://tools.veracode.com/integrations/Microsoft/VisualStudio/update/Veracode.HmacExample.zip",children:"Veracode Tools"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"hmacauthheadercs",children:(0,r.jsx)(n.code,{children:"HmacAuthHeader.cs"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cs",children:'using System;\nusing System.Globalization;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.RegularExpressions;\n\nnamespace Veracode.HmacExample.App.Core_50\n{\n    public abstract class HmacAuthHeader\n    {\n        private static readonly RandomNumberGenerator RngRandom = RandomNumberGenerator.Create();\n\n        public static readonly HmacAuthHeader HmacSha256 = new HmacSha256AuthHeader();\n\n        private sealed class HmacSha256AuthHeader : HmacAuthHeader\n        {\n            protected override string GetHashAlgorithm() { return "HmacSHA256"; }\n\n            protected override string GetAuthorizationScheme() { return "VERACODE-HMAC-SHA-256"; }\n\n            protected override string GetRequestVersion() { return "vcode_request_version_1"; }\n\n            protected override string GetTextEncoding() { return "UTF-8"; }\n\n            protected override int GetNonceSize() { return 16; }\n\n            internal HmacSha256AuthHeader() { }\n        }\n\n        protected abstract string GetHashAlgorithm();\n        protected abstract string GetAuthorizationScheme();\n        protected abstract string GetRequestVersion();\n        protected abstract string GetTextEncoding();\n        protected abstract int GetNonceSize();\n\n        protected string CurrentDateStamp()\n        {\n            return ((long)((TimeSpan)(DateTime.UtcNow - new DateTime(1970, 1, 1))).TotalMilliseconds).ToString();\n        }\n\n        protected static byte[] NewNonce(int size)\n        {\n            var nonceBytes = new byte[size];\n            RngRandom.GetBytes(nonceBytes);\n\n            return nonceBytes;\n        }\n\n        protected byte[] ComputeHash(byte[] data, byte[] key)\n        {\n            HMAC mac = HMAC.Create(GetHashAlgorithm());\n            mac.Key = key;\n            return mac.ComputeHash(data);\n        }\n\n        protected byte[] CalculateDataSignature(byte[] apiKeyBytes, byte[] nonceBytes, string dateStamp, string data)\n        {\n            var kNonce = ComputeHash(nonceBytes, apiKeyBytes);\n            var kDate = ComputeHash(Encoding.GetEncoding(GetTextEncoding()).GetBytes(dateStamp), kNonce);\n            var kSignature = ComputeHash(Encoding.GetEncoding(GetTextEncoding()).GetBytes(GetRequestVersion()), kDate);\n\n            return ComputeHash(Encoding.GetEncoding(GetTextEncoding()).GetBytes(data), kSignature);\n        }\n\n        public string CreateSigningData(string id, string host, string url, string method)\n        {            \n            var idTokens = id.Split(\'-\');\n            var hexId = idTokens[idTokens.Length - 1];\n            var result = $"id={hexId.ToLower()}&host={host.ToLower()}&url={url}&method={method.ToUpper()}";\n            return result.ToString(CultureInfo.GetCultureInfo("en-US"));\n        }\n\n\n        public string CalculateAuthorizationHeader(string apiId, string apiKey, string hostName, string uriString, string urlQueryParams, string httpMethod)\n        {\n            if (string.IsNullOrEmpty(urlQueryParams))\n                    uriString += (urlQueryParams);\n\n            if (string.IsNullOrEmpty(apiId) || string.IsNullOrEmpty(apiKey) || string.IsNullOrEmpty(hostName) ||\n                string.IsNullOrEmpty(uriString) || string.IsNullOrEmpty(httpMethod))\n                throw new ArgumentException("Null or Empty value provided");\n\n            var data = CreateSigningData(apiId, hostName, uriString, httpMethod);\n            var dateStamp = CurrentDateStamp();\n            var nonceBytes = NewNonce(GetNonceSize());\n\n            var kToken = apiKey.Split("-");\n            var key = kToken[kToken.Length - 1];\n            var dataSignature = CalculateDataSignature(FromHexBinary(key), nonceBytes, dateStamp, data);\n\n            var idToken = apiId.Split("-");\n            var hexId = idToken[idToken.Length - 1];\n            var authorizationParam = $"id={hexId},ts={dateStamp},nonce={ToHexBinary(nonceBytes)},sig={ToHexBinary(dataSignature)}";\n\n            return GetAuthorizationScheme() + " " + authorizationParam;\n        }\n\n        public static string ToHexBinary(byte[] bytes)\n        {\n            return Convert.ToHexString(bytes);\n        }\n\n        public static byte[] FromHexBinary(string hexBinaryString)\n        {\n            return Convert.FromHexString(hexBinaryString);\n        } \n\n        public static bool IsValidHexBinary(string hexBinaryString)\n        {\n            if (string.IsNullOrEmpty(hexBinaryString))\n            {\n                try\n                {\n                    byte[] bytes = FromHexBinary(hexBinaryString);\n                    return bytes != null;\n                }\n                catch (Exception ex) \n                { \n                    Console.WriteLine(ex.Message);\n                }\n            }\n\n            return false;\n        }\n\n        public static bool IsValidAuthHeaderToken(string authHeaderToken)\n        {\n            if (string.IsNullOrEmpty(authHeaderToken))\n            {\n                // For valid Authorization header token syntax see https://www.ietf.org/rfc/rfc2617.txt, https://www.ietf.org/rfc/rfc2068.txt\n                var isMatch = Regex.IsMatch(authHeaderToken, "^[\\\\x21\\\\x23-\\\\x27\\\\x2A-\\\\x2B\\\\x2D-\\\\x2E\\\\x30-\\\\x39\\\\x41-\\\\x5A\\\\x5E-\\\\x7A\\\\x7C\\\\x7E]+$");\n\n                return isMatch;\n            }\n\n            return false;\n        }\n\n        private HmacAuthHeader() { }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"programcs",children:(0,r.jsx)(n.code,{children:"Program.cs"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cs",children:'using System;\nusing System.IO;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Configuration;\n\nnamespace Veracode.HmacExample.App.Core_50\n{\n    public class Program\n    {\n        private const string AuthorizationHeader = "Authorization";\n\n        public static void Main(string[] args)\n        {\n            try\n            {\n                const string urlBase = "analysiscenter.veracode.com";\n                \n                var getapp = GetAppList(urlBase).GetAwaiter().GetResult();\n                Console.WriteLine(getapp);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex.Message);\n            }\n            finally\n            {\n                Console.ReadKey();\n            }\n        }\n\n        public async static Task<string> GetAppList(string baseUrl)\n        {\n            const string urlPath = "/api/5.0/getapplist.do";\n            var urlParams = string.Empty;\n            const string httpVerb = "GET";\n            var config = new ConfigurationBuilder()\n                                               .SetBasePath(Directory.GetCurrentDirectory())\n                                               .AddJsonFile($"appsettings.json", true, true)\n                                               .Build();\n            var ApiId = config["settings:apiId"];\n            var ApiKey = config["settings:apiKey"];\n\n            using (var client = new HttpClient())\n            {\n                var uri = $"https://{baseUrl}";\n                client.BaseAddress = new Uri(uri, UriKind.Absolute);\n\n                var authHeader = HmacAuthHeader.HmacSha256.CalculateAuthorizationHeader(ApiId, ApiKey, baseUrl, urlPath, urlParams, httpVerb);\n                client.DefaultRequestHeaders.Add(AuthorizationHeader, authHeader);\n\n                using (var response = await client.GetAsync(urlPath).ConfigureAwait(false))\n                {\n                    return await response.Content.ReadAsStringAsync();\n                }\n            }\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"appsettingsjson",children:(0,r.jsx)(n.code,{children:"appsettings.json"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n"settings": {\n"apiId": "VERACODE_SECRET_ID_GOES_HERE",\n"apiKey": "VERACODE_SECRET_KEY_GOES_HERE"\n}\n}\n'})})]})}function l(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>s});var r=t(67294);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);