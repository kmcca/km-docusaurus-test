"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5971],{68897:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>_,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var a=i(85893),t=i(11151);const s={title:"Pipeline Scan example for using GitLab and Gradle with automatic issue generation",slug:"/r/Pipeline_Scan_Example_for_Using_GitLab_and_Gradle_with_Automatic_Issue_Generation"},r=void 0,o={id:"guides/integrations/cicd/pipeline_scan/pipeline_scan_gitlab_examples/r_gitlab_gradle_example",title:"Pipeline Scan example for using GitLab and Gradle with automatic issue generation",description:"This example YAML code shows how to add a Pipeline Scan and automatic issue generation as a build stage in a GitLab build pipeline using Gradle.",source:"@site/docs/guides/04_integrations/03_cicd/09_pipeline_scan/08_pipeline_scan_gitlab_examples/04_r_gitlab_gradle_example.md",sourceDirName:"guides/04_integrations/03_cicd/09_pipeline_scan/08_pipeline_scan_gitlab_examples",slug:"/r/Pipeline_Scan_Example_for_Using_GitLab_and_Gradle_with_Automatic_Issue_Generation",permalink:"/km-docusaurus-test/r/Pipeline_Scan_Example_for_Using_GitLab_and_Gradle_with_Automatic_Issue_Generation",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Pipeline Scan example for using GitLab and Gradle with automatic issue generation",slug:"/r/Pipeline_Scan_Example_for_Using_GitLab_and_Gradle_with_Automatic_Issue_Generation"},sidebar:"tutorialSidebar",previous:{title:"Pipeline Scan example for using Gradle with GitLab",permalink:"/km-docusaurus-test/r/Pipeline_Scan_Example_for_Using_Gradle_with_GitLab"},next:{title:"Pipeline Scan example for using GitLab and Gradle with automatic vulnerability generation",permalink:"/km-docusaurus-test/r/Pipeline_Scan_Example_for_Using_GitLab_and_Gradle_with_Automatic_Vulnerability_Generation"}},_={},c=[];function l(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"This example YAML code shows how to add a Pipeline Scan and automatic issue generation as a build stage in a GitLab build pipeline using Gradle."}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["Before you can use the ",(0,a.jsx)(n.a,{href:"/km-docusaurus-test/r/r_pipeline_scan_commands",children:(0,a.jsx)(n.code,{children:"--gl_issue_generation"})})," parameter, you must ",(0,a.jsx)(n.a,{href:"/km-docusaurus-test/r/Set_a_GitLab_Access_Token",children:"create a GitLab access token"}),". If you want to use this parameter when scanning Java applications, you must also ",(0,a.jsx)(n.a,{href:"/km-docusaurus-test/r/Set_Environment_Variables_for_GitLab_Base_Directories",children:"configure environment variables to set GitLab base directories"}),". You can use any GitLab subscription to generate GitLab issues."]})}),"\n",(0,a.jsxs)(n.p,{children:["This structure in the GitLab CI performs a self-test and sets the ",(0,a.jsx)(n.code,{children:"$VERACODE_API_*"})," variables in the CI/CD settings."]}),"\n",(0,a.jsxs)(n.p,{children:["The example includes a script that downloads and unzips ",(0,a.jsx)(n.code,{children:"pipeline-scan-LATEST.zip"}),", to ensure you have the latest version, then runs ",(0,a.jsx)(n.code,{children:"pipeline-scan.jar"})," using your ",(0,a.jsx)(n.a,{href:"/km-docusaurus-test/r/c_api_credentials3",children:"API credentials"}),". For improved stability, Veracode recommends that you change these scripts to use the ",(0,a.jsx)(n.a,{href:"https://hub.docker.com/r/veracode/pipeline-scan",children:"Pipeline Scan Docker image"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'image: <image-with-above-requirements>\n\nstages:\n  - build\n  - scan\n\nbuild_job:\n  stage: build\n  artifacts:\n    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}_build\n    paths:\n      - build/\n    expire_in: 1 week\n  script: gradle clean build\n\npipeline scan:\n  stage: scan\n  dependencies:\n    - build_job\n  artifacts:\n    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}_pipeline-results\n    paths:\n      - results.json\n    expire_in: 1 week\n    when: always\n  script:\n    - curl -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip\n    - unzip pipeline-scan-LATEST.zip pipeline-scan.jar\n    - java -jar pipeline-scan.jar\n      --veracode_api_id "${VERACODE_API_ID}"\n      --veracode_api_key "${VERACODE_API_SECRET}"\n      --file "build/libs/sample.jar"\n      --fail_on_severity="Very High, High"\n      --fail_on_cwe="80"\n      --baseline_file "${CI_BASELINE_PATH}"\n      --timeout "${CI_TIMEOUT}"\n      --project_name "${CI_PROJECT_PATH}"\n      --project_url "${CI_REPOSITORY_URL}"\n      --project_ref "${CI_COMMIT_REF_NAME}"\n      --gl_issue_generation true\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>r});var a=i(67294);const t={},s=a.createContext(t);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);